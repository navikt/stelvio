package no.stelvio.presentation.security.logout;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.util.Assert;

/**
 * A logout service capable of logging the user out from both a Websphere Application Server (WAS) and an OpenAM instance in one
 * redirect. It inherits the WasLogoutService which generates the url needed for a WAS logout, and appends the url needed to
 * terminate the user's session on OpenAM after the WAS logoutExitPage parameter.
 * <p>
 * The url build by the OpenAMLogoutService contains a OpenAM command to terminate the current user's OpenAM session, and a
 * parameter that specifies a custom response page at OpenAM. The custom response page must be located in the same
 * <i>lib/html/</i> directory at OpenAM which contains the default HTML response forms. The response page should either present
 * the user with a successful logout message or a redirect to an appropriate url.
 * <p>
 * The use of a custom response page must be configured in OPenAM's configuration file by setting the value of the
 * <b>use-filename-for-pkmslogout</b> stanza entry in the <b>[acnt-mgt]</b> stanza to "yes".
 * <p>
 * <br>
 * The OpenAMLogoutService offers default values for all its parameters except the <b>pointOfContactHostAddress</b>. This
 * parameter <b>must</b> be set and should be the absolute url of the host which is the first point of contact in what could be
 * a chain of proxy servers and load balancers. This is necessary so that OpenAM can interpret the logout command correctly.
 * 
 * @see no.stelvio.presentation.security.logout.WasLogoutService
 * @version $Id$
 * */
public class OpenAMLogoutService extends WasLogoutService implements InitializingBean {

	private static final Log LOG = LogFactory.getLog(OpenAMLogoutService.class);
	private static final String OPENAM_LOGOUT_ACTION = "/esso/logout";
	private String openAMLogoutAction = OPENAM_LOGOUT_ACTION;
	private boolean logoutFromOpenAM = true;
	private String pointOfContactHostAddress;

	@Override
	public void afterPropertiesSet() {
		Assert.notNull(this.pointOfContactHostAddress, "A point of contact hostaddress must be specified. "
				+ " Please set the pointOfContactHostAddress property.");
		if (this.pointOfContactHostAddress != null) {
			Assert.isTrue(pointOfContactHostAddress.startsWith("http"), "The point of contact hostaddress must be absolute.");
		}

	}

	/**
	 * Builds and returns the url needed to perform a logout from both WAS and OpenAM in one redirect. This is achieved by
	 * appending the url needed to perform a OpenAM logout after the logoutExitPage parameter of the WasLogoutService. If the
	 * parameter logoutFromOpenAM is set to false, only the url generated by the WasLogoutService will be returned and the
	 * supplied parameter destinationUrl will be used as the logoutExitPage.
	 * 
	 * @param destinationUrl
	 *            the destinationUrl used by the WasLogoutService if logoutFromOpenAM is set to false.
	 * @return the url needed to perfom a logout from either WAS or both WAS and OpenAM.
	 */
	@Override
	protected String buildRedirectUrl(String destinationUrl) {
		if (isLogoutFromOpenAM()) {
			String destination = generateOpenAMLogoutUrl();
			return super.buildRedirectUrl(destination);
		} else {
			return super.buildRedirectUrl(destinationUrl);
		}
	}

	/**
	 * Builds a OpenAM specific logout URL. The URL is absolute and constructed in the following way: <br>
	 * <code>[pointOfContactHostAddress]/[openAMLogoutAction]</code> <br>
	 * <br>
	 * <b>Example url:</b> <code>https://openAM.somedomain.no/pkmslogout?filename=logout_success.html </code>
	 * 
	 * 
	 * @return the URL used to log out from the current session at OpenAM.
	 */
	protected String generateOpenAMLogoutUrl() {

		if (LOG.isDebugEnabled()) {
			LOG.debug("Generating the URL to perform an OpenAM logout.");
		}

		StringBuffer url = new StringBuffer();
		String tempURL = pointOfContactHostAddress;
		if (tempURL != null && tempURL.endsWith("/")) {
			int end = tempURL.lastIndexOf("/");
			pointOfContactHostAddress = tempURL.substring(0, end);
		}
		url.append(pointOfContactHostAddress);
		url.append(openAMLogoutAction);

		if (LOG.isDebugEnabled()) {
			LOG.debug("Point of contact host address is:" + pointOfContactHostAddress);
			LOG.debug("The logout command is:" + openAMLogoutAction);
			LOG.debug("Final generated URL:" + url.toString());
		}
		return url.toString();
	}

	/**
	 * Checks whether or not a OpenAM logout should be performed.
	 * 
	 * @return true or false
	 */
	public boolean isLogoutFromOpenAM() {
		return logoutFromOpenAM;
	}

	/**
	 * Sets that a logout from OpenAM should be performed.
	 * 
	 * @param logoutFromOpenAM
	 *            true or false
	 */
	public void setLogoutFromOpenAM(boolean logoutFromOpenAM) {
		this.logoutFromOpenAM = logoutFromOpenAM;
	}

	/**
	 * Gets the absolute url of the host which is the first point of contact in what could be a chain of proxy servers and load
	 * balancers.
	 * 
	 * @return the point of contact hostaddress.
	 */
	public String getPointOfContactHostAddress() {
		return pointOfContactHostAddress;
	}

	/**
	 * Sets the absolute url of the host which is the first point of contact in what could be a chain of proxy servers and load
	 * balancers.
	 * 
	 * @param pointOfContactHostAddress
	 *            the absolute url to set.
	 */
	public void setPointOfContactHostAddress(String pointOfContactHostAddress) {
		this.pointOfContactHostAddress = pointOfContactHostAddress;
	}
}

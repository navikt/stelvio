<?xml version="1.0" encoding="UTF-8"?><!--xtools2_universal_type_manager--><mappingRoot com.ibm.xtools.transform.authoring.mapping.featureFilterMode="advanced" domainID="com.ibm.xtools.transform.authoring.mapping.ecore2ecore" targetNamespace="http://no.stelvio.esb.models.transformation.uml2servicemodel.Uml2servicemodel/1.0.0" xmlns="http://www.ibm.com/2006/ccl/Mapping" xmlns:ext="http://www.ibm.com/xtools/transform/authoring/mapping/model/extensions" xmlns:map="http://no.stelvio.esb.models.transformation.uml2servicemodel.Uml2servicemodel/1.0.0">
    <input path="/plugin/org.eclipse.uml2.uml/model/UML.ecore" var="src"/>
    <input genModelUri="" path="/resource/stelvio-models-service-uml-profile/profiles/NAV_UML_Profile.epx" var="src2"/>
    <input genModelUri="" path="pathmap://XSD_PROFILES/XSDProfile.epx" var="src3"/>
    <input path="/plugin/org.eclipse.emf.ecore/model/Ecore.ecore" var="src4"/>
    <input path="/plugin/org.eclipse.gmf.runtime.notation/model/notation.ecore" var="src5"/>
    <input path="/plugin/com.ibm.xtools.uml.msl/profiles/Default.epx" var="src9"/>
    <output path="/resource/stelvio-models-service-metamodel/model/ServiceMetamodel.ecore" var="tgt">
        <annotation key="genModelUri" value="platform:/resource/stelvio-models-service-metamodel/model/ServiceMetamodel.genmodel"/>
    </output>
    <annotation key="transformationID" value="no.stelvio.esb.models.transformation.uml2servicemodel.Uml2servicemodelTransformation"/>
    <mappingDeclaration name="PackageToServicePackage">
        <input path="$src/type('Package')" var="Package_src"/>
        <output path="type('ServicePackage')" var="ServicePackage_tgt"/>
        <mapping>
            <input path="packagedElement" var="packagedElement_src"/>
            <output path="serviceInterface" var="serviceInterface_tgt"/>
            <submap ref="map:InterfaceToServiceInterface"/>
        </mapping>
        <mapping>
            <input path="name" var="name_src"/>
            <output path="name" var="name_tgt"/>
        </mapping>
        <mapping>
            <input path="packagedElement" var="packagedElement_src"/>
            <output path="childPackages" var="childPackages_tgt"/>
            <submap ref="map:PackageToServicePackage"/>
        </mapping>
        <mapping>
            <output path="UUID" var="UUID_tgt"/>
            <custom>
                <code language="java">String xmiURI = Package_src.eResource().getURIFragment(Package_src);&#13;
ServicePackage_tgt.setUUID(xmiURI);</code>
            </custom>
        </mapping>
        <mapping>
            <input path="ownedComment[-1]/body" var="body_src"/>
            <output path="description" var="description_tgt"/>
            <custom>
                <code language="java">org.eclipse.emf.common.util.EList&lt;org.eclipse.uml2.uml.Comment&gt; comments = Package_src.getOwnedComments();&#13;
for (org.eclipse.uml2.uml.Comment comment : comments) &#13;
{&#13;
	org.eclipse.uml2.uml.Stereotype docStereotype = comment.getAppliedStereotype("Default::Documentation");&#13;
	if (docStereotype != null) &#13;
	{&#13;
		ServicePackage_tgt.setDescription(comment.getBody());&#13;
	}&#13;
}</code>
            </custom>
        </mapping>
        <mapping>
            <input path="packagedElement" var="packagedElement_src"/>
            <output path="complexTypes" var="complexTypes_tgt"/>
            <submap ref="map:ComplexTypeToComplexType"/>
            <condition com.ibm.xtools.transform.authoring.mapping.conditionUsage="srcFilter">
                <code language="java">org.eclipse.uml2.uml.Stereotype stereotype = packagedElement_src.getAppliedStereotype("XSDProfile::complexType");&#13;
return stereotype != null;</code>
            </condition>
        </mapping>
        <mapping>
            <input path="packagedElement" var="packagedElement_src"/>
            <output path="complexTypes" var="complexTypes_tgt"/>
            <submap ref="map:EnumerationToComplexType"/>
            <condition com.ibm.xtools.transform.authoring.mapping.conditionUsage="srcFilter">
                <code language="java">org.eclipse.uml2.uml.Stereotype stereotype = packagedElement_src.getAppliedStereotype("XSDProfile::enumeration");&#13;
return stereotype != null;</code>
            </condition>
        </mapping>
        <mapping>
            <input path="eAnnotations[-1]/contents" var="contents_src"/>
            <output path="diagrams" var="diagrams_tgt"/>
            <submap ref="map:DiagramToDiagram"/>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="ComplexTypeToComplexType">
        <input path="$src/type('Class')" var="Class_src"/>
        <output path="type('ComplexType')" var="ComplexType_tgt"/>
        <mapping>
            <input path="name" var="name_src"/>
            <output path="name" var="name_tgt"/>
        </mapping>
        <mapping>
            <output path="version" var="version_tgt"/>
            <custom>
                <code language="java">org.eclipse.uml2.uml.Package classPackage = Class_src.getPackage();&#13;
      org.eclipse.uml2.uml.Stereotype classPackageStereotype = classPackage.getAppliedStereotype("XSDProfile::schema");&#13;
      if(classPackageStereotype != null)&#13;
      {&#13;
    	  String version = (String)classPackage.getValue(classPackageStereotype, "version");&#13;
    	  ComplexType_tgt.setVersion(version);&#13;
      }</code>
            </custom>
        </mapping>
        <mapping>
            <output path="namespace" var="namespace_tgt"/>
            <custom>
                <code language="java">org.eclipse.uml2.uml.Package classPackage = Class_src.getPackage();&#13;
      org.eclipse.uml2.uml.Stereotype classPackageStereotype = classPackage.getAppliedStereotype("XSDProfile::schema");&#13;
      if(classPackageStereotype != null)&#13;
      {&#13;
    	  String targetNamespace = (String)classPackage.getValue(classPackageStereotype, "targetNamespace");&#13;
    	  ComplexType_tgt.setNamespace(targetNamespace);&#13;
      }</code>
            </custom>
        </mapping>
        <mapping>
            <output path="UUID" var="UUID_tgt"/>
            <custom>
                <code language="java">String xmiURI = Class_src.eResource().getURIFragment(Class_src);&#13;
ComplexType_tgt.setUUID(xmiURI);</code>
            </custom>
        </mapping>
        <mapping>
            <input path="attribute" var="attribute_src"/>
            <output path="attributes" var="attributes_tgt"/>
            <submap ref="map:PropertyToAttribute"/>
            <condition com.ibm.xtools.transform.authoring.mapping.conditionUsage="customExtractor">
                <code language="java">return Class_src.getAllAttributes();</code>
            </condition>
        </mapping>
        <mapping>
            <output path="isEnumeration" var="isEnumeration_tgt"/>
            <custom>
                <code language="java">ComplexType_tgt.setIsEnumeration(false);</code>
            </custom>
        </mapping>
        <mapping>
            <output path="isFault" var="isFault_tgt"/>
            <custom>
                <code language="java">org.eclipse.uml2.uml.Stereotype faultMetaDataStereotype = Class_src.getAppliedStereotype("NAV UML Profile::FaultMetaData");&#13;
if(faultMetaDataStereotype != null)&#13;
	ComplexType_tgt.setIsFault(true);&#13;
else&#13;
	ComplexType_tgt.setIsFault(false);</code>
            </custom>
        </mapping>
        <mapping>
            <input path="ownedComment" var="ownedComment_src"/>
            <output path="attachments" var="attachments_tgt"/>
            <submap ref="map:UrlToAttachment"/>
        </mapping>
        <mapping>
            <input path="ownedComment[-1]" var="ownedComment_src"/>
            <output path="description" var="description_tgt"/>
            <custom>
                <code language="java">org.eclipse.emf.common.util.EList&lt;org.eclipse.uml2.uml.Comment&gt; comments = Class_src.getOwnedComments();&#13;
for (org.eclipse.uml2.uml.Comment comment : comments) &#13;
{&#13;
	org.eclipse.uml2.uml.Stereotype docStereotype = comment.getAppliedStereotype("Default::Documentation");&#13;
	if (docStereotype != null) &#13;
	{&#13;
		ComplexType_tgt.setDescription(comment.getBody());&#13;
	}&#13;
}</code>
            </custom>
        </mapping>
        <mapping>
            <input path="generalization[-1]/target" var="target_src"/>
            <output path="generalizations" var="generalizations_tgt"/>
            <submap ref="map:ComplexTypeToComplexType"/>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="EnumerationToComplexType">
        <input path="$src/type('Class')" var="Class_src"/>
        <output path="type('ComplexType')" var="ComplexType_tgt"/>
        <mapping>
            <input path="attribute" var="attribute_src"/>
            <output path="attributes" var="attributes_tgt"/>
            <submap ref="map:PropertyToAttribute"/>
        </mapping>
        <mapping>
            <input path="name" var="name_src"/>
            <output path="name" var="name_tgt"/>
        </mapping>
        <mapping>
            <input path="ownedComment[-1]/body" var="body_src"/>
            <output path="description" var="description_tgt"/>
            <custom>
                <code language="java">org.eclipse.emf.common.util.EList&lt;org.eclipse.uml2.uml.Comment&gt; comments = Class_src.getOwnedComments();&#13;
for (org.eclipse.uml2.uml.Comment comment : comments) &#13;
{&#13;
	org.eclipse.uml2.uml.Stereotype docStereotype = comment.getAppliedStereotype("Default::Documentation");&#13;
	if (docStereotype != null) &#13;
	{&#13;
		ComplexType_tgt.setDescription(comment.getBody());&#13;
	}&#13;
}</code>
            </custom>
        </mapping>
        <mapping>
            <output path="isEnumeration" var="isEnumeration_tgt"/>
            <custom>
                <code language="java">ComplexType_tgt.setIsEnumeration(true);</code>
            </custom>
        </mapping>
        <mapping>
            <output path="namespace" var="namespace_tgt"/>
            <custom>
                <code language="java">org.eclipse.uml2.uml.Package classPackage = Class_src.getPackage();&#13;
      org.eclipse.uml2.uml.Stereotype classPackageStereotype = classPackage.getAppliedStereotype("XSDProfile::schema");&#13;
      if(classPackageStereotype != null)&#13;
      {&#13;
    	  String targetNamespace = (String)classPackage.getValue(classPackageStereotype, "targetNamespace");&#13;
    	  ComplexType_tgt.setNamespace(targetNamespace);&#13;
      }</code>
            </custom>
        </mapping>
        <mapping>
            <output path="version" var="version_tgt"/>
            <custom>
                <code language="java">org.eclipse.uml2.uml.Package classPackage = Class_src.getPackage();&#13;
      org.eclipse.uml2.uml.Stereotype classPackageStereotype = classPackage.getAppliedStereotype("XSDProfile::schema");&#13;
      if(classPackageStereotype != null)&#13;
      {&#13;
    	  String version = (String)classPackage.getValue(classPackageStereotype, "version");&#13;
    	  ComplexType_tgt.setVersion(version);&#13;
      }</code>
            </custom>
        </mapping>
        <mapping>
            <output path="UUID" var="UUID_tgt"/>
            <custom>
                <code language="java">String xmiURI = Class_src.eResource().getURIFragment(Class_src);&#13;
ComplexType_tgt.setUUID(xmiURI);</code>
            </custom>
        </mapping>
        <mapping>
            <output path="isFault" var="isFault_tgt"/>
            <custom>
                <code language="java">ComplexType_tgt.setIsFault(false);</code>
            </custom>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="PropertyToAttribute">
        <input path="$src/type('Property')" var="Property_src"/>
        <output path="type('Attribute')" var="Attribute_tgt"/>
        <mapping>
            <input path="name" var="name_src"/>
            <output path="name" var="name_tgt"/>
        </mapping>
        <mapping>
            <input path="type" var="type_src"/>
            <output path="typeName" var="typeName_tgt"/>
            <custom>
                <code language="java">if(Property_src.getType() != null)&#13;
	Attribute_tgt.setTypeName(Property_src.getType().getName());</code>
            </custom>
        </mapping>
        <mapping>
            <input path="type" var="type_src"/>
            <output path="typeRef" var="typeRef_tgt"/>
            <submap ref="map:ComplexTypeToComplexType"/>
            <condition com.ibm.xtools.transform.authoring.mapping.conditionUsage="srcFilter">
                <code language="java">org.eclipse.uml2.uml.Stereotype stereotype = type_src.getAppliedStereotype("XSDProfile::complexType");&#13;
return stereotype != null;</code>
            </condition>
        </mapping>
        <mapping>
            <input path="upperValue" var="upperValue_src"/>
            <output path="isList" var="isList_tgt"/>
            <custom>
                <code language="java">int upperValue = Property_src.getUpper();&#13;
      if(upperValue == -1)&#13;
    	  Attribute_tgt.setIsList(true);&#13;
      else&#13;
    	  Attribute_tgt.setIsList(false);</code>
            </custom>
        </mapping>
        <mapping>
            <input path="ownedComment[-1]/body" var="body_src"/>
            <output path="description" var="description_tgt"/>
            <custom>
                <code language="java">org.eclipse.emf.common.util.EList&lt;org.eclipse.uml2.uml.Comment&gt; comments = Property_src.getOwnedComments();&#13;
for (org.eclipse.uml2.uml.Comment comment : comments) &#13;
{&#13;
	org.eclipse.uml2.uml.Stereotype docStereotype = comment.getAppliedStereotype("Default::Documentation");&#13;
	if (docStereotype != null) &#13;
	{&#13;
		Attribute_tgt.setDescription(comment.getBody());&#13;
	}&#13;
}</code>
            </custom>
        </mapping>
        <mapping>
            <input path="lowerValue" var="lowerValue_src"/>
            <output path="isRequired" var="isRequired_tgt"/>
            <custom>
                <code language="java">int lowerValue = Property_src.getLower();&#13;
      if(lowerValue == 0)&#13;
    	  Attribute_tgt.setIsRequired(false);&#13;
      else&#13;
    	  Attribute_tgt.setIsRequired(true);</code>
            </custom>
        </mapping>
        <mapping>
            <output path="UUID" var="UUID_tgt"/>
            <custom>
                <code language="java">String xmiURI = Property_src.eResource().getURIFragment(Property_src);&#13;
Attribute_tgt.setUUID(xmiURI);</code>
            </custom>
        </mapping>
        <mapping>
            <input path="type" var="type_src"/>
            <output path="typeRef" var="typeRef_tgt"/>
            <submap ref="map:EnumerationToComplexType"/>
            <condition com.ibm.xtools.transform.authoring.mapping.conditionUsage="srcFilter">
                <code language="java">org.eclipse.uml2.uml.Stereotype stereotype = type_src.getAppliedStereotype("XSDProfile::enumeration");&#13;
return stereotype != null;</code>
            </condition>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="ParameterToComplexType">
        <input path="$src/type('Parameter')" var="Parameter_src"/>
        <output path="type('ComplexType')" var="ComplexType_tgt"/>
        <mapping>
            <input path="type" var="type_src"/>
            <output path="$ComplexType_tgt" var="ComplexType_tgt"/>
            <ext:customSubmapRefinement ref="map:ComplexTypeToComplexType"/>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="InterfaceToServiceInterface">
        <input path="$src/type('Interface')" var="Interface_src"/>
        <output path="type('ServiceInterface')" var="ServiceInterface_tgt"/>
        <mapping>
            <input path="ownedOperation" var="ownedOperation_src"/>
            <output path="serviceOperations" var="serviceOperations_tgt"/>
            <submap ref="map:OperationToServiceOperation"/>
        </mapping>
        <mapping>
            <input path="name" var="name_src"/>
            <output path="name" var="name_tgt"/>
        </mapping>
        <mapping>
            <input path="ownedComment[-1]/body" var="body_src"/>
            <output path="description" var="description_tgt"/>
            <custom>
                <code language="java">org.eclipse.emf.common.util.EList&lt;org.eclipse.uml2.uml.Comment&gt; comments = Interface_src.getOwnedComments();&#13;
for (org.eclipse.uml2.uml.Comment comment : comments) &#13;
{&#13;
	org.eclipse.uml2.uml.Stereotype docStereotype = comment.getAppliedStereotype("Default::Documentation");&#13;
	if (docStereotype != null) &#13;
	{&#13;
		ServiceInterface_tgt.setDescription(comment.getBody());&#13;
	}&#13;
}</code>
            </custom>
        </mapping>
        <mapping>
            <output path="UUID" var="UUID_tgt"/>
            <custom>
                <code language="java">String xmiURI = Interface_src.eResource().getURIFragment(Interface_src);&#13;
ServiceInterface_tgt.setUUID(xmiURI);</code>
            </custom>
        </mapping>
        <mapping>
            <output path="namespace" var="namespace_tgt"/>
            <custom>
                <code language="java">org.eclipse.uml2.uml.Package interfacePackage = Interface_src.getPackage();&#13;
      org.eclipse.uml2.uml.Stereotype classPackageStereotype = interfacePackage&#13;
          .getAppliedStereotype("XSDProfile::schema");&#13;
      if (classPackageStereotype != null) {&#13;
        String targetNamespace = (String) interfacePackage.getValue(&#13;
            classPackageStereotype, "targetNamespace");&#13;
        ServiceInterface_tgt.setNamespace(targetNamespace);&#13;
      }</code>
            </custom>
        </mapping>
        <mapping>
            <output path="version" var="version_tgt"/>
            <custom>
                <code language="java">org.eclipse.uml2.uml.Package interfacePackage = Interface_src.getPackage();&#13;
      org.eclipse.uml2.uml.Stereotype classPackageStereotype = interfacePackage&#13;
          .getAppliedStereotype("XSDProfile::schema");&#13;
      if (classPackageStereotype != null) {&#13;
        String version = (String) interfacePackage.getValue(&#13;
            classPackageStereotype, "version");&#13;
        ServiceInterface_tgt.setVersion(version);&#13;
      }</code>
            </custom>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="OperationToServiceOperation">
        <input path="$src/type('Operation')stereotype[$src2/type('Tjeneste')]" var="Operation_src"/>
        <output path="type('ServiceOperation')" var="ServiceOperation_tgt"/>
        <mapping>
            <input path="ownedParameter[-1]" var="ownedParameter_src"/>
            <output path="inputMessage" var="inputMessage_tgt"/>
            <submap ref="map:ParameterToMessage"/>
            <condition com.ibm.xtools.transform.authoring.mapping.conditionUsage="customExtractor">
                <code language="java">java.util.Collection l = new java.util.ArrayList();&#13;
      &#13;
      org.eclipse.emf.common.util.EList&lt;Parameter&gt; parameters = Operation_src.getOwnedParameters();&#13;
      for (Parameter parameter : parameters) &#13;
      {&#13;
    	  boolean isInParameter = parameter.getDirection().getValue() == org.eclipse.uml2.uml.ParameterDirectionKind.IN;&#13;
    	  boolean isException = parameter.isException();&#13;
    	  if(isInParameter &amp;&amp; !isException)&#13;
    	  {&#13;
    		  l.add(parameter);&#13;
    		  return l;&#13;
    	  }&#13;
      }&#13;
      return l;</code>
            </condition>
        </mapping>
        <mapping>
            <input path="name" var="name_src"/>
            <output path="name" var="name_tgt"/>
        </mapping>
        <mapping>
            <output path="UUID" var="UUID_tgt"/>
            <custom>
                <code language="java">String xmiURI = Operation_src.eResource().getURIFragment(Operation_src);&#13;
ServiceOperation_tgt.setUUID(xmiURI);</code>
            </custom>
        </mapping>
        <mapping>
            <output path="namespace" var="namespace_tgt"/>
            <custom>
                <code language="java">org.eclipse.uml2.uml.Package interfacePackage = Operation_src.getNearestPackage();&#13;
      org.eclipse.uml2.uml.Stereotype classPackageStereotype = interfacePackage&#13;
          .getAppliedStereotype("XSDProfile::schema");&#13;
      if (classPackageStereotype != null) {&#13;
        String targetNamespace = (String) interfacePackage.getValue(&#13;
            classPackageStereotype, "targetNamespace");&#13;
        ServiceOperation_tgt.setNamespace(targetNamespace);&#13;
      }</code>
            </custom>
        </mapping>
        <mapping>
            <output path="version" var="version_tgt"/>
            <custom>
                <code language="java">org.eclipse.uml2.uml.Package interfacePackage = Operation_src&#13;
          .getNearestPackage();&#13;
      org.eclipse.uml2.uml.Stereotype classPackageStereotype = interfacePackage&#13;
          .getAppliedStereotype("XSDProfile::schema");&#13;
      if (classPackageStereotype != null) {&#13;
        String version = (String) interfacePackage.getValue(&#13;
            classPackageStereotype, "version");&#13;
        ServiceOperation_tgt.setVersion(version);&#13;
      }</code>
            </custom>
        </mapping>
        <mapping>
            <input path="tjenestemetadata/kortBeskrivelse" var="kortBeskrivelse_src"/>
            <output path="description" var="description_tgt"/>
        </mapping>
        <mapping>
            <input path="$Operation_src" var="Operation_src"/>
            <output path="serviceMetadata" var="serviceMetadata_tgt"/>
            <submap ref="map:OperationToOperationMetadata"/>
        </mapping>
        <mapping>
            <input path="ownedParameter[-1]" var="ownedParameter_src"/>
            <output path="outputMessage" var="outputMessage_tgt"/>
            <submap ref="map:ParameterToMessage"/>
            <condition com.ibm.xtools.transform.authoring.mapping.conditionUsage="customExtractor">
                <code language="java">java.util.Collection l = new java.util.ArrayList();&#13;
      &#13;
      org.eclipse.emf.common.util.EList&lt;Parameter&gt; parameters = Operation_src.getOwnedParameters();&#13;
      for (Parameter parameter : parameters) &#13;
      {&#13;
    	  boolean isOutParameter = parameter.getDirection().getValue() == org.eclipse.uml2.uml.ParameterDirectionKind.OUT;&#13;
    	  boolean isException = parameter.isException();&#13;
    	  if(isOutParameter &amp;&amp; !isException)&#13;
    	  {&#13;
    		  l.add(parameter);&#13;
    		  return l;&#13;
    	  }&#13;
      }&#13;
      return l;</code>
            </condition>
        </mapping>
        <mapping>
            <input path="ownedParameter" var="ownedParameter_src"/>
            <output path="faults" var="faults_tgt"/>
            <submap ref="map:ParameterToFault"/>
            <condition com.ibm.xtools.transform.authoring.mapping.conditionUsage="srcFilter">
                <code language="java">boolean isOutParameter = ownedParameter_src.getDirection().getValue() == org.eclipse.uml2.uml.ParameterDirectionKind.OUT;&#13;
boolean isException = ownedParameter_src.isException();&#13;
return isOutParameter &amp;&amp; isException;</code>
            </condition>
        </mapping>
        <mapping>
            <input path="ownedComment" var="ownedComment_src"/>
            <output path="attachments" var="attachments_tgt"/>
            <submap ref="map:UrlToAttachment"/>
        </mapping>
        <mapping>
            <input path="ownedComment[-1]/body" var="body_src"/>
            <output path="behaviourRules" var="behaviourRules_tgt"/>
        </mapping>
        <mapping>
            <input path="endringslogg" var="endringslogg_src"/>
            <output path="changelog" var="changelog_tgt"/>
            <submap ref="map:EndringsloggToChangelog"/>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="OperationToOperationMetadata">
        <input path="$src/type('Operation')stereotype[$src2/type('Tjeneste')]" var="Operation_src"/>
        <output path="type('OperationMetadata')" var="OperationMetadata_tgt"/>
        <mapping>
            <input path="tjenestemetadata" var="tjenestemetadata_src"/>
            <output path="$OperationMetadata_tgt" var="OperationMetadata_tgt"/>
            <ext:customSubmapRefinement ref="map:TjenestemetadataToOperationMetadata"/>
        </mapping>
        <mapping>
            <input path="ownedComment[-1]/body" var="body_src"/>
            <output path="proceessingRules" var="proceessingRules_tgt"/>
        </mapping>
        <mapping>
            <input path="nokkelindikator" var="nokkelindikator_src"/>
            <output path="$OperationMetadata_tgt" var="OperationMetadata_tgt"/>
            <ext:customSubmapRefinement ref="map:NokkelindikatorToOperationMetadata"/>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="TjenestemetadataToOperationMetadata">
        <input path="$src2/type('Tjenestemetadata')" var="Tjenestemetadata_src"/>
        <output path="type('OperationMetadata')" var="OperationMetadata_tgt"/>
        <mapping>
            <input path="tjenesteid" var="tjenesteid_src"/>
            <output path="id" var="id_tgt"/>
        </mapping>
        <mapping>
            <input path="transaksjonshandtering" var="transaksjonshandtering_src"/>
            <output path="transactions" var="transactions_tgt"/>
        </mapping>
        <mapping>
            <input path="produsentTjenesteRef" var="produsentTjenesteRef_src"/>
            <output path="producerServiceRef" var="producerServiceRef_tgt"/>
        </mapping>
        <mapping>
            <input path="tilstandsendring" var="tilstandsendring_src"/>
            <output path="stateManagement" var="stateManagement_tgt"/>
        </mapping>
        <mapping>
            <input path="sikkerhet" var="sikkerhet_src"/>
            <output path="security" var="security_tgt"/>
        </mapping>
        <mapping>
            <input path="erBruktIBatch" var="erBruktIBatch_src"/>
            <output path="isUsedByBatch" var="isUsedByBatch_tgt"/>
        </mapping>
        <mapping>
            <input path="produsentKomponent" var="produsentKomponent_src"/>
            <output path="producerComponent" var="producerComponent_tgt"/>
        </mapping>
        <mapping>
            <input path="scope" var="scope_src"/>
            <output path="scope" var="scope_tgt"/>
            <custom>
                <code language="java">if (Tjenestemetadata_src != null) {&#13;
        org.eclipse.emf.common.util.EList&lt;org.eclipse.emf.ecore.EAttribute&gt; tjenestemetadataAttributes = Tjenestemetadata_src&#13;
            .eClass().getEAttributes();&#13;
        for (org.eclipse.emf.ecore.EAttribute eAttribute : tjenestemetadataAttributes) {&#13;
          if (eAttribute.getName().equals("scope")) {&#13;
            org.eclipse.emf.ecore.impl.EEnumLiteralImpl o = (org.eclipse.emf.ecore.impl.EEnumLiteralImpl) Tjenestemetadata_src&#13;
                .eGet(eAttribute);&#13;
            String scopeNavn = o.getName();&#13;
&#13;
            no.stelvio.esb.models.service.metamodel.Scope scope = no.stelvio.esb.models.service.metamodel.Scope.get(scopeNavn);&#13;
            OperationMetadata_tgt.setScope(scope);&#13;
          }&#13;
        }&#13;
      }</code>
            </custom>
        </mapping>
        <mapping>
            <input path="tjenestekategori" var="tjenestekategori_src"/>
            <output path="serviceCategory" var="serviceCategory_tgt"/>
            <submap ref="map:TjenestekategoriToServiceCategory"/>
        </mapping>
        <mapping>
            <input path="feilhåndtering" var="feilhåndtering_src"/>
            <output path="errorHandling" var="errorHandling_tgt"/>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="NokkelindikatorToOperationMetadata">
        <input path="$src2/type('Nokkelindikator')" var="Nokkelindikator_src"/>
        <output path="type('OperationMetadata')" var="OperationMetadata_tgt"/>
        <mapping>
            <input path="responstid" var="responstid_src"/>
            <output path="responseTime" var="responseTime_tgt"/>
        </mapping>
        <mapping>
            <input path="volumbegrensning" var="volumbegrensning_src"/>
            <output path="volumeCapacity" var="volumeCapacity_tgt"/>
        </mapping>
        <mapping>
            <input path="oppetid" var="oppetid_src"/>
            <output path="uptime" var="uptime_tgt"/>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="TjenestekategoriToServiceCategory">
        <input path="$src2/type('Tjenestekategori')" var="Tjenestekategori_src"/>
        <output path="type('ServiceCatagory')" var="ServiceCatagory_tgt"/>
        <mapping>
            <input path="grupperingsnavn" var="grupperingsnavn_src"/>
            <output path="groupingName" var="groupingName_tgt"/>
        </mapping>
        <mapping>
            <input path="funksjon" var="funksjon_src"/>
            <output path="function" var="function_tgt"/>
        </mapping>
        <mapping>
            <input path="kategori" var="kategori_src"/>
            <output path="name" var="name_tgt"/>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="ParameterToMessage">
        <input path="$src/type('Parameter')" var="Parameter_src"/>
        <output path="type('Message')" var="Message_tgt"/>
        <mapping>
            <input path="name" var="name_src"/>
            <output path="name" var="name_tgt"/>
        </mapping>
        <mapping>
            <input path="type" var="type_src"/>
            <output path="typeRef" var="typeRef_tgt"/>
            <submap ref="map:ComplexTypeToComplexType"/>
        </mapping>
        <mapping>
            <output path="UUID" var="UUID_tgt"/>
            <custom>
                <code language="java">String xmiURI = Parameter_src.eResource().getURIFragment(Parameter_src);&#13;
Message_tgt.setUUID(xmiURI);</code>
            </custom>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="FaultMetaDataToFault">
        <input path="$src/type('Class')stereotype[$src2/type('FaultMetaData'),$src3/type('complexType')]" var="Class_src"/>
        <output path="type('Fault')" var="Fault_tgt"/>
        <mapping>
            <input path="feilId" var="feilId_src"/>
            <output path="id" var="id_tgt"/>
        </mapping>
        <mapping>
            <input path="feiltype" var="feiltype_src"/>
            <output path="faultType" var="faultType_tgt"/>
        </mapping>
        <mapping>
            <input path="eksternReferanse" var="eksternReferanse_src"/>
            <output path="producerFaultRef" var="producerFaultRef_tgt"/>
        </mapping>
        <mapping>
            <input path="$Class_src" var="Class_src"/>
            <output path="typeRef" var="typeRef_tgt"/>
            <submap ref="map:ComplexTypeToComplexType"/>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="ParameterToFault">
        <input path="$src/type('Parameter')" var="Parameter_src"/>
        <output path="type('Fault')" var="Fault_tgt"/>
        <mapping>
            <input path="type" var="type_src"/>
            <output path="$Fault_tgt" var="Fault_tgt"/>
            <ext:customSubmapRefinement ref="map:FaultMetaDataToFault"/>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="DiagramToDiagram">
        <input path="$src5/type('Diagram')" var="Diagram_src"/>
        <output path="type('Diagram')" var="Diagram_tgt"/>
        <mapping>
            <input path="type" var="type_src"/>
            <output path="typeName" var="typeName_tgt"/>
        </mapping>
        <mapping>
            <input path="name" var="name_src"/>
            <output path="name" var="name_tgt"/>
        </mapping>
        <mapping>
            <output path="UUID" var="UUID_tgt"/>
            <custom>
                <code language="java">String xmiURI = Diagram_src.eResource().getURIFragment(Diagram_src);&#13;
Diagram_tgt.setUUID(xmiURI);</code>
            </custom>
        </mapping>
        <mapping>
            <input path="persistedChildren[-1]/element" var="element_src"/>
            <output path="complexTypes[-1]" var="complexTypes_tgt"/>
            <submap ref="map:ComplexTypeToComplexType"/>
            <condition com.ibm.xtools.transform.authoring.mapping.conditionUsage="srcFilter">
                <code language="java">if(element_src instanceof org.eclipse.uml2.uml.Class)&#13;
    	{&#13;
    		org.eclipse.uml2.uml.Class c = (org.eclipse.uml2.uml.Class)element_src;&#13;
    	      org.eclipse.uml2.uml.Stereotype stereotype = c&#13;
              .getAppliedStereotype("XSDProfile::complexType");&#13;
    	      return stereotype != null;&#13;
    	}&#13;
    	return false;</code>
            </condition>
        </mapping>
        <mapping>
            <input path="persistedChildren[-1]/element" var="element_src"/>
            <output path="complexTypes[-1]" var="complexTypes_tgt"/>
            <submap ref="map:EnumerationToComplexType"/>
            <condition com.ibm.xtools.transform.authoring.mapping.conditionUsage="srcFilter">
                <code language="java">if(element_src instanceof org.eclipse.uml2.uml.Class)&#13;
    	{&#13;
    		org.eclipse.uml2.uml.Class c = (org.eclipse.uml2.uml.Class)element_src;&#13;
    	      org.eclipse.uml2.uml.Stereotype stereotype = c&#13;
              .getAppliedStereotype("XSDProfile::enumeration");&#13;
    	      return stereotype != null;&#13;
    	}&#13;
    	return false;</code>
            </condition>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="UrlToAttachment">
        <input path="$src/type('Comment')stereotype[$src9/type('URL')]" var="Comment_src"/>
        <output path="type('Attachment')" var="Attachment_tgt"/>
        <mapping>
            <input path="displayName" var="displayName_src"/>
            <output path="Name" var="Name_tgt"/>
        </mapping>
        <mapping>
            <input path="type" var="type_src"/>
            <output path="Type" var="Type_tgt"/>
        </mapping>
        <mapping>
            <input path="body" var="body_src"/>
            <output path="FilePath" var="FilePath_tgt"/>
        </mapping>
        <mapping>
            <output path="UUID" var="UUID_tgt"/>
            <custom>
                <code language="java">String xmiURI = Comment_src.eResource().getURIFragment(Comment_src);&#13;
Attachment_tgt.setUUID(xmiURI);</code>
            </custom>
        </mapping>
    </mappingDeclaration>
    <mappingDeclaration name="EndringsloggToChangelog">
        <input path="$src2/type('Endringslogg')" var="Endringslogg_src"/>
        <output path="type('Changelog')" var="Changelog_tgt"/>
        <mapping>
            <input path="versjon" var="versjon_src"/>
            <output path="version" var="version_tgt"/>
        </mapping>
        <mapping>
            <input path="dato" var="dato_src"/>
            <output path="date" var="date_tgt"/>
        </mapping>
        <mapping>
            <input path="endring" var="endring_src"/>
            <output path="description" var="description_tgt"/>
        </mapping>
        <mapping>
            <input path="produsent" var="produsent_src"/>
            <output path="editor" var="editor_tgt"/>
        </mapping>
    </mappingDeclaration>
</mappingRoot>
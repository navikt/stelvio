package no.nav.maven.plugin.ear;

import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.jar.Attributes;
import java.util.jar.Manifest;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.maven.project.MavenProject;
import org.apache.xmlbeans.XmlException;
import org.codehaus.plexus.archiver.Archiver;
import org.codehaus.plexus.archiver.ArchiverException;
import org.codehaus.plexus.archiver.UnArchiver;

import com.sun.java.xml.ns.j2Ee.ApplicationDocument;

/**
 * Goal which updates the ear file generated by service deploy.
 * 
 * @author test@example.com
 * 
 * @goal update-ear
 */
public class UpdateEarMojo extends AbstractMojo {
	/**
	 * @component roleHint="zip"
	 * @required
	 * @readonly
	 */
	private UnArchiver unArchiver;

	/**
	 * @component roleHint="zip"
	 * @required
	 * @readonly
	 */
	private Archiver archiver;

	/**
	 * @parameter expression="${project}"
	 * @required
	 * @readonly
	 */
	private MavenProject project;

	/**
	 * Defines the assembly type to use. Valid values are zip [default] and pi (project interchange).
	 * 
	 * @parameter default-value="${project.build.finalName}"
	 */
	private String displayName;

	public void execute() throws MojoExecutionException, MojoFailureException {
		// This "stupid" if test is here because I want to configure the plugin
		// execution element i parent POMs
		if (!"pom".equals(project.getPackaging())) {
			new EarUpdater(project.getArtifact().getFile()).update();
		}
	}

	private class EarUpdater {
		private File workingDir;
		private File earFile;

		public EarUpdater(File earFile) {
			this.earFile = earFile;
			workingDir = createWorkingDir(project);
		}
		
		private File createWorkingDir(MavenProject project) {
			File parentDir = new File(project.getBuild().getDirectory(), "update-ear");
			File workingDir = new File(parentDir, String.valueOf(System.currentTimeMillis()));
			workingDir.mkdirs();
			return workingDir;
		}

		public void update() throws MojoExecutionException {
			extractArchive();
			updateArchive();
			createArchive();
		}

		private void extractArchive() throws MojoExecutionException {
			try {
				unArchiver.setDestDirectory(workingDir);
				unArchiver.setSourceFile(earFile);
				unArchiver.extract();
			} catch (ArchiverException e) {
				throw new MojoExecutionException("An error occured when extracting archive", e);
			} catch (IOException e) {
				throw new MojoExecutionException("An error occured when extracting archive", e);
			}
		}

		private void createArchive() throws MojoExecutionException {
			try {
				archiver.addDirectory(workingDir);
				archiver.setDestFile(earFile);
				archiver.createArchive();
			} catch (ArchiverException e) {
				throw new MojoExecutionException("An error occured when creating archive", e);
			} catch (IOException e) {
				throw new MojoExecutionException("An error occured when creating archive", e);
			}
		}

		/**
		 * Adds Implementation-Version to the ear's Manifest.mf
		 * Used to enable delta deploy for the ESB
		 * 
		 * @throws MojoExecutionException
		 */
		private void updateArchive() throws MojoExecutionException {
			try {
								
				File manifestFile = new File(new File(workingDir, "META-INF"), "Manifest.mf");
				
				Manifest manifest = new Manifest(new FileInputStream(manifestFile));
				if(manifest != null){
					Attributes manifestAttributes = manifest.getMainAttributes();
					if(manifestAttributes != null){
						manifestAttributes.putValue("Implementation-Version", project.getVersion());
					}
				}
				BufferedOutputStream bos = null;
				
				try {
					bos = new BufferedOutputStream(new FileOutputStream(manifestFile));
					manifest.write(bos);
				} catch (IOException ioe) {
					throw new MojoExecutionException("An error occured when updating manifest", ioe);
				} finally {
					if (bos != null){
						try {
							bos.close();
						} catch(IOException ioe2){
							throw new MojoExecutionException("An error occured while trying to close file", ioe2);
						}
					}
				}
								
				
			} catch (IOException e) {
				throw new MojoExecutionException("An error occured when updating archive", e);
			}
		}
	}
}

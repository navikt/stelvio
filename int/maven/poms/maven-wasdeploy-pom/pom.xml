<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>no.nav.maven.wasdeploy.pom</groupId>
	<artifactId>maven-wasdeploy-pom</artifactId>
	<packaging>pom</packaging>
	<version>1.0-SNAPSHOT</version>
	<name>maven-wasdeploy-pom</name>
	<url>http://maven.apache.org</url>
	
	<properties>
		<!-- hudson -->
		<devArchBaseDir>${project.build.directory}</devArchBaseDir>
		<bundleAreaDir>/opt/BUNDLE</bundleAreaDir>
		<stagingAreaDir>${devArchBaseDir}/STAGING</stagingAreaDir>
		<wsadminLocation>/opt/IBM/WebSphere/ProcServer/profiles/Dmgr01/bin/</wsadminLocation>
		<!-- /hudson -->
		
		<wasdeployVersion>1.3-SNAPSHOT</wasdeployVersion>
		<xmlvalidatorVersion>1.0</xmlvalidatorVersion>
		<bundleArea>${bundleAreaDir}/${env}</bundleArea>
		<stagingArea>${stagingAreaDir}/${env}/${app}</stagingArea>
		<scriptAbsPath>${project.basedir}/scripts/InstallApp.py</scriptAbsPath>
		<mapFile>${devArchBaseDir}/build_version_mapping.txt</mapFile>
		<applicationProperties>${devArchBaseDir}/module_config/${app}/spring</applicationProperties>
		<environmentFilesDir>${devArchBaseDir}/environments</environmentFilesDir>
		<environmentFile>${environmentFilesDir}/${env}.xml</environmentFile>
		<environmentXSD>${environmentFilesDir}/environment.xsd</environmentXSD>
		<log4jDir>${devArchBaseDir}/module_config/${app}/log4j</log4jDir>
		<batchcontrollerDir>${devArchBaseDir}/module_config/${app}/batchcontroller</batchcontrollerDir>
		<pselvISSessionTimeout>30</pselvISSessionTimeout>
		<pselvSSAccessDeniedURL>/tilleggsfunksjonalitet/tilgangnektet.jsf?_flowId=tilgangnektet-flow</pselvSSAccessDeniedURL>
		<roleMappingDir>${devArchBaseDir}/security/rolemapping</roleMappingDir>
		<ejbSecurityFile>${devArchBaseDir}/security/ejb-security/${environment/domain}/ejb-security.xml</ejbSecurityFile>
	</properties>
	
	<dependencies>
		<dependency>
			<groupId>no.nav.maven.devarch</groupId>
			<artifactId>devarch-config</artifactId>
			<version>${configVersion}</version>
		</dependency>
	</dependencies>

	<build>
		<plugins>
		
			<plugin>
				<artifactId>maven-enforcer-plugin</artifactId>
				<version>1.0-beta-1</version>
			</plugin>
			
			<!-- Disable clean plugin to avoid deleting the output directories-->
			<plugin>
				<artifactId>maven-clean-plugin</artifactId>
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			
			<plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <version>2.0</version>
                <executions>
               			<!-- Step 1: Download and unpack configuration -->
                        <execution>
                                <id>unpack-configuration</id>
                                <phase>validate</phase>
                                <goals>
                                        <goal>unpack-dependencies</goal>
                                </goals>
                                <configuration>
                                        <outputDirectory>${devArchBaseDir}</outputDirectory>
                                </configuration>
                        </execution>
                </executions>
       		 </plugin>
       		 
			<plugin>
				<groupId>no.nav.maven.plugins</groupId>
				<artifactId>maven-xmlvalidator-plugin</artifactId>
				<version>${xmlvalidatorVersion}</version>
				<executions>
					<!-- Step 2: Validate environment file against defined XSD -->
					<execution>
						<id>validate-xml</id>
						<phase>validate</phase>
						<goals>
							<goal>validate-xml</goal>
						</goals>
						<configuration>
							<xsdFile>${environmentXSD}</xsdFile>
							<xmlFile>${environmentFile}</xmlFile>
						</configuration>
					</execution>
				</executions>
			</plugin>
			
			<plugin>
				<groupId>no.nav.maven.plugins</groupId>
				<artifactId>maven-wasdeploy-plugin</artifactId>
				<version>${wasdeployVersion}</version>
				<executions>
					<!-- Step 4: Download and unpack application artifacts -->
					<execution>
						<id>process-dependencies</id>
						<phase>generate-sources</phase>
						<goals>
							<goal>process-dependencies</goal>
						</goals>
					</execution>
					<!-- Step 3: Load properties from environment file -->
					<execution>
						<id>load-xml-property-files</id>
						<phase>initialize</phase>
						<goals>
							<goal>load-xml-properties</goal>
						</goals>
						<configuration>
							<files>
								<file>${environmentFile}</file>
							</files>
						</configuration>
					</execution>
					<!-- Step 6: Perform custom file operations to prepare for bundle/deploy -->
					<execution>
						<id>handle-files</id>
						<phase>process-resources</phase>
						<goals>
							<goal>handle-files</goal>
						</goals>
					</execution>
					<!-- Step 8: Deploy + upload or bundle -->
					<execution>
						<id>deploy-or-bundle</id>
						<phase>process-classes</phase>
						<goals>
							<goal>deploy-or-bundle</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<!-- Step 5: Generate environment spesific configuration -->
			<plugin>
				<artifactId>maven-resources-plugin</artifactId>
				<executions>
					<execution>
						<id>interpolate-appconfig-resources</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<!-- Specifies where the property files end up after interpolation (exposed by wasdeploy-plugin)  -->
							<outputDirectory>${configDir}</outputDirectory>
							<resources>
								<resource>
									<!-- Specifies where the application configuration/property files reside -->
									<directory>${applicationProperties}</directory>
									<includes>
										<include>cfg-*.properties</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
					<execution>
						<id>interpolate-batchcontroller-resources</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>copy-resources</goal>
						</goals>
						<configuration>
							<!-- Specifies where the property files end up after interpolation (exposed by wasdeploy-plugin)  -->
							<outputDirectory>${batchDir}/config</outputDirectory>
							<resources>
								<resource>
									<!-- Specifies where the batchcontroller file reside -->
									<directory>${batchcontrollerDir}</directory>
									<includes>
										<include>btc-controllerclient.properties</include>
									</includes>
									<filtering>true</filtering>
								</resource>
							</resources>
						</configuration>
					</execution>
				</executions>
			</plugin>

			<!-- Step 7: Apply EJB security -->
			<plugin>
				<groupId>no.nav.maven.plugins</groupId>
				<artifactId>maven-deployment-descriptor-plugin</artifactId>
				<version>1.1.14</version>
				<executions>
					<execution>
						<phase>compile</phase>
						<id>addEjbSecurity</id>
						<goals>
							<goal>addEjbSecurity</goal>
						</goals>
						<configuration>
							<ear>${stagingArea}/${earName}</ear>
							<springConfigFile>file:${ejbSecurityFile}</springConfigFile>
							<!--  mappingFile>${mapFile}</mappingFile-->
						</configuration>
					</execution>
				</executions>
			</plugin>
			
		</plugins>
	</build>
</project>

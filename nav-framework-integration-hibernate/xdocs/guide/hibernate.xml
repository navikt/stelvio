<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Guide Hibernate/Middlegen</title>
	</properties>
	<body>
		<section name="Guide Hibernate/Middlegen">
			
			<subsection name="Oversikt">
			
				<p>
					Hibernate er rammeverket som benyttes for persistering av data. Det ligger mellom 
               integrasjonslaget og databasen. Hibernate benytter XML-filer til å mappe mellom 
               tabeller i databasen og domeneobjekter i applikasjonen. Disse XML-filene genereres opp direkte fra tabellene 
               i basen ved å bruke verktøyet Middlegen, og med Hibernate-verktøyet hbm2java
               genereres deretter kildekoden til domeneobjektene. Denne bruksguiden er delt i to:
				</p>
            <ul>
               <li>Generere opp XML mappingfiler og domeneobjekter med Middlegen/Hibernate</li>
               <li>Bruke Hibernate til å hente og lagre data i databasen</li>
            </ul>
				
			</subsection>			
			
			<subsection name="Generere mappingfiler og domeneobjekter">
				<p>
               Verktøyet hbm2java brukes som en plugin til Middlegen og ved å kjøre en enkelt ant-task
               startes Middlegen med GUI som gir mulighet til å se på detaljene til tabellene og generere 
               opp *.hbm.xml-filene. Når Middlegen avsluttes vil så hbm2java generere opp Javaklassene som 
               representerer domeneobjekter. Her er en stegvis fremgangsmåte:
				</p>	
            <h4>Endre build.properties</h4>
               <ul>
                  <li>Åpne fila <code>build.properties</code> i JEdit, (ligger under e:/data/middelgen-2.0-vo)</li>
                  <li>Erstatt identen på developer med din egen (NB! Store bokstaver)</li>
                  <li>Sett inn ønsket pakkenavn dit domeneobjektene skal genereres</li>
                  <li>Velg ønskede kataloger for plassering av filene.</li>
               </ul>
<source><![CDATA[
developer=RWA2920
packagename=no.nav.integration.framework.hibernate.test
build.dir=e:/data/nav-framework-integration-hibernate/
build.gen-hbm.dir=${build.dir}/src/main/resources
build.gen-src.dir=${build.dir}/src/main/java
]]></source>
            <p><i>Eksempel på innholdet i build.properties</i></p>
				
				<h4>Endre tables.xml</h4>
				<p>
               I fila tables.xml (ligger under e:/data/middelgen-2.0-vo) legges de tabellene som man ønsker å generere opp. Om man ikke 
               spesifiserer noen tabeller vil Middlegen hente ut alle tabellene på skjemaet. Tabellnavnene
               angis på følgende format: <source><![CDATA[<table name="DUMMY"/>]]></source> NB! Tabellnavn må oppgis med store 
               bokstaver.
				</p>
			
            <h4>Kjøre Middlegen/hbm2java</h4>
				<p>
					For å kjøre Middlegen og hbm2java gjør man følgende:
               <ul>
                  <li>Start et kommandovindu (Start -> Kjør -> cmd)</li>
                  <li>Gå til katalogen e:/data/middelgen-2.0-vo</li>
                  <li>For å generere både mappingfilene og domeneobjektene, skriv:<source>ant hbm2java</source></li>
                  <li>Man får da opp dette skjermbildet som er Middlegens GUI: <br/><img src="../images/middlegen.jpg"/></li>
                  <li>Ved å trykke på Generate-knappen blir mappingfilene generert, og når Middlegen avsluttes vil 
                  domeneobjektene bli generert.</li>
                  <li>I de spesifiserte katalogene i <code>build.properties</code> skal nå filene ligge med 
                  korrekte stier og pakkenavn.</li>
               </ul>
				</p>
			</subsection>
			
			<subsection name="Bruk av Hibernate i Javakoden">
			<p>Hibernate-rammeverket brukes i koden til å hente ut og lagre data i databasen. 
         Det finnes flere måter å hente ut og lagre data på, og her er en kort beskrivelse av 
         noen metoder.         
         </p>
         <h4>Konfigurering</h4>
         <p>Hibernate sørger for all kommunikasjon mot databasen, og bruker fila <code>hibernate.properties</code>
         til å konfigurere opp databasetilkoblingen. Hver enkelt utvikler vil ha sitt eget
         testskjema å gå mot, og derfor må man endre denne fila lokalt. Endre følgende 
         linjer til din egen ident (NB! Case-sensitivt!):</p>
         <source>
hibernate.connection.username RWA2920
hibernate.connection.password rwa2920
         </source>
         <h4>Configuration, SessionFactory og Transaction</h4>
         <p>Hibernate leser konfigurasjonsfila når man instansierer et <code>Configuration</code> objekt. 
         Dette objektet inneholder all mapping av Javaklasser til en relasjonsdatabase. Ved å legge
         til domeneobjekter vil Hibernate finne den tilhørende mappingfila i classpathen.
         Når objektet er opprettet kan man bygge en <code>SessionFactory</code> som genererer 
         <code>Session</code>-instanser. Ut fra en <code>Session</code> kan man hente et 
         <code>Transaction</code>-objekt som håndterer transaksjonen. Se kodeeksempelet under:</p>
         <source>
// Create new Configuration object
Configuration config = new Configuration();
// Add domain object class
config.addClass( Dummy.class );

// Build the SessionFactory
Session sess = config.buildSessionFactory().openSession();
Transaction t = sess.beginTransaction();

// Create a domain object instance
Dummy d = new Dummy();
// Add data to the domainobject (TESTINTEGER is a column in the DUMMY-table)
d.setTestinteger(99);
// Save domain object to session
sess.save( d );

// Commit changes and close session
t.commit();
sess.close();
         </source>
         <h4>Hente ut data</h4>
         <p>Når man henter ut data via Hibernate mottar man domeneobjekter som representerer
         rader i en tabell i databasen. For å laste inn et objekt finnes det flere muligheter: 
         man kan hente ut et objekt der man kjenner primærnøkkelen direkte gjennom en 
         <code>load</code> metode på <code>session</code>-objektet eller man kan kjøre spørringer
         mot databasen med en <code>find</code>-metode. Under følger et par eksempler:
         </p>
         <source>
// Get cat with id-number 123
Long pkid = new Long( 123 );
Cat myCat = sess.load( Cat.class, pkId );
..
// Get all cats that are 4 years old
List cats = sess.find(
   "from Cat as cat where cat.age = ?",
   age,
   Hibernate.LONG);  
         </source>
         
			</subsection>
						<subsection name = "Endringslogg">
<source><![CDATA[
$Log$
Revision 1.6  2004/06/18 13:48:22  rwa2920
Lagt inn endringslogg
]]>			
</source>
			</subsection>
		</section>
	</body>
</document>


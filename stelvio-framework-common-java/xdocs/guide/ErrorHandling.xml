<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Feilhåndtering - Guide</title>
	</properties>
	<body>
		<section name="Feilhåndtering - Guide">
			
			<subsection name="Oversikt">
			
				<p>
					Feilhåndtering er en viktig tjeneste som både arkitektur og applikasjoner har
					behov for. Pakken <i>no.stelvio.common.framework.error</i>
					består av klasser og interface for feilhåndtering. 
				</p>
				<p>
					Følgende funksjonalitet skal ivareta driftssikker og driftsvennlig håndtering av 
					ulike typer feil og avvik:
				</p>
				<ul>
					<li> 
						Alle feil og avvik tilordnes en unik feil-id for å identifisere alle spesifikke feil 
						som har oppstått samt skille de fra hverandre. Følgefeil vil inneholde en referanse 
						til den originale feilen. <br/>
					</li>
					<li> 
						Alle feil og avvik knyttes mot en bruker-id for å identifisere hvilken bruker som har 
						utført operasjonen hvor feilen har oppstått. Alternativt benyttes en system-id når 
						funksjonaliteten ikke er brukerinitiert, som for eksempel batcher. <br/>
					</li>
					<li>
						Alle feil og avvik knyttes mot hvilket vindu brukeren jobbet i og hvilken handling brukeren
						utførte når feilen oppstod.
					</li>
					<li> 
						Alle feil og avvik knyttes mot en unik transaksjons-id for å identifisere 
						i hvilken transaksjon operasjonen som feilet inngikk i. <br/>
					</li>
					<li> 
						Logging av feil og avvik delegeres til tjenesten for hendelseslogging. <br/>
					</li>
					<li> 
						En feil eller et avvik logges aldri mer enn én gang. <br/>
					</li>
					<li> 
						Feil og avvik som propageres fra et tjenestelag til et tilstøtende tjenestelag 
						inneholder aldri nøstede feil eller avvik. Dette gjøres for å unngå problemer med 
						classloading. <br/>
					</li>
					<li> 
						Forventede feiltyper identifiseres, navngis og kategoriseres i henhold til type og 
						alvorlighetsgrad. Denne informasjonen vedlikeholdes i en databasetabell.<br/>
					</li>
				</ul>
				
			</subsection>			
			
			<subsection name="Håndtering av applikasjonsfeil">
			
				<h4>Identifisere ny feiltype</h4>
				<p>
					Dersom du har behov for å opprette en ny type applikasjonsfeil, går du frem på følgende måte:
				</p>
				<ol>
					<li>
						Velg en ny feilkode og legg den til som en ny konstant i klassen <i>ApplicationError</i> som skal
						ligge i pakken <i>no.stelvio.common.
                        <font color="blue">[applikasjon]</font></i>. Pass på
						at feilkoden ikke er definert fra før, og at den er ihht konvensjonene beskrevet i 
						<a href="../apidocs/no/nav/common/framework/error/ErrorCode.html">
                            no.stelvio.common.framework.error.ErrorCode
                        </a>.<br/>
					</li>
					<li>
						Registrer feiltypen i databasen (Tabellen er foreløpig ikke definert) med følgende informasjon;
						feilkode, alvorlighetsgrad, feilmelding som skal presenteres for brukeren, feilens årsak og 
						forslag til tiltak for å unngå at feilen oppstår på nytt.
					</li>
				</ol>
				
				<h4>Hvordan kaste en ApplicationException</h4>
				<p>
					Eksempelene nedenfor illustrerer hvordan en applikasjonskomponent kan informere om at gjeldende sak 
					mangler informasjon om hvem bidragsmottaker er.
				</p>
				<h5>OpprettSakAction.java</h5>
				<p>I presentasjonslaget skal <i>ApplicationException</i> benyttes direkte:</p>				
<source>
...
// Applikasjonen kan ikke fortsette før bidragsmottaker er registrert
if( null == sak.getBM() ) {
   // Koble gjeldende saksnummer til feilen
   throw new ApplicationException( ApplicationError.SAK_BM_IKKE_REGISTRERT, sak.getSaksnummer() );
}
...
</source>				
				<h5>OpprettSak.java</h5>
				<p>I forretningslaget skal ikke <i>ApplicationException</i> benyttes direkte, men 
				<i>ServiceFailedException</i> istedenfor. <i>ServiceFailedException</i> inneholder ekstra 
				informasjon om status på gjeldende transaksjon</p>.				
<source>
...
// Forretningstjenesten kan ikke fortsette før bidragsmottaker er registrert
if( null == sak.getBM() ) {
   // Koble gjeldende saksnummer til feilen
   throw new ServiceFailedException( ApplicationError.SAK_BM_IKKE_REGISTRERT, sak.getSaksnummer() );
}
...
</source>				
				
				<h4>Hvordan fange opp og håndtere en ApplicationException</h4>
				<p>
					En applikasjonskomponent kan håndtere feil på følgende måter:
					<ol>
						<li>Ikke fange opp applikasjonsfeilen, men la noen andre håndtere den</li>
						<li>Fange opp og håndtere alle applikasjonsfeil og deretter fortsette prosessering</li>
						<li>Fange opp alle applikasjonsfeil og pakke dem inn i en mer generell applikasjonsfeil</li>
						<li>Fange opp all applikasjonsfeil, og håndtere utvalgte feiltyper</li>
					</ol>
					Eksempelet nedenfor viser all ovenfornevnte situasjoner bortsett fra den første:
				</p>
<source>
...
// # 2
try {
   // Opprett sak
   response = opprettSak.execute( request );
} catch( ServiceFailedException sfe ) {
   // Dersom oppretting av sak feiler, fortsetter vi med noe annet istedenfor
   ...
   response2 = noeAnnet.execute( request2 );
   ...
}
...
// # 3
try {
   // Opprett sak
   response = opprettSak.execute( request );
} catch( ServiceFailedException sfe ) {
   // Dersom oppretting av sak feiler, informerer vi om at opplysningene er mangelfulle
   throw new ApplicationException( ApplicationError.SKJERMBILDE_MANGELFULT_UTFYLT , sfe );
}
...
// # 3
try {
   // Opprett sak
   response = opprettSak.execute( request );
} catch( ServiceFailedException sfe ) {
   if( ApplicationError.SAK_BM_IKKE_REGISTRERT.equals( sfe.getErrorCode() ) {
      // Dersom bidragsmottaker ikke er registrert, fortsetter vi med noe annet 
      ...
      response2 = noeAnnet.execute( request2 );
       ...  
   } else {
      // Dersom det er andre feil som har oppstått, informerer vi om at opplysningene er mangelfulle
      throw new ApplicationException( ApplicationError.SKJERMBILDE_MANGELFULT_UTFYLT , sfe );
   }
}
...
</source>
			
			</subsection>
			
			<subsection name="Håndtering av systemfeil">
			
				<p>
					Applikasjonskomponenter skal <b>IKKE</b> fange opp og håndtere systemfeil. 
				</p>
				<p>
					Arkitekturkomponenter kan fange opp og håndtere systemfeil, men skal <b>IKKE</b> logge feilen.
				</p>
			
			</subsection>
			
			<subsection name="Konfigurering av feiltyper">

				<h4>Oppdatering av konstanter</h4>
				<p>Feilkoder skal defineres i en av følgende klasser:</p>
				<ul>
					<li>no.stelvio.common.framework.error.ErrorCode - interne feil i feilhåndteringen</li>
					<li>no.stelvio.common.framework.FrameworkError - systemfeil</li>
					<li>no.stelvio.common.
                        <font color="blue">[applikasjon]</font>.ApplicationError - applikasjonsfeil</li>
				</ul>
				<h4>Oppdatering av databasen</h4>
				<p>
					Fremgangsmåte for oppdatering av feiltyper i databasen vil bli beskrevet når datamodellen, og 
					rutiner for definering av testdata er på plass.
				</p>
				
			</subsection>
			<subsection name = "Endringslogg">
<source><![CDATA[
$Log$
Revision 1.2  2004/06/16 14:07:45  psa2920
la til endringslogg
]]>			
</source>
			</subsection>			
		</section>
	</body>
</document>


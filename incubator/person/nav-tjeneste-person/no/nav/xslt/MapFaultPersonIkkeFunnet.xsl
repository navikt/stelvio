<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="no/nav/xslt/MapFaultPersonIkkeFunnet.map" md5sum="d20bba785a2e54e81efe00e8f2fb80c2" version="7.0.302" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.302
*
*   Mapping file:		MapFaultPersonIkkeFunnet.map
*   Map declaration(s):	MapFaultPersonIkkeFunnet
*   Input file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252Fnav-tjeneste-person%252Fno%252Fnav%252Fasbo%257DTPSPersonSharedContext/xpath%3D%252F/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/sharedContext%3D%257Bhttp%253A%252F%252Fnav-tjeneste-person%252Fno%252Fnav%252Fasbo%257DTPSPersonSharedContext/message%3D%257Bhttp%253A%252F%252Fnav.no%252Fvirksomhet%252Ftjenester%252Fperson%252Fv1%257DhentPerson_PersonIkkeFunnet/xpath%3D%252F/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:io3="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io4="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:out6="http://nav.no/virksomhet/part/person/v1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:out="http://nav.no/virksomhet/tjenester/person/v1"
    xmlns:out7="http://nav-person-tjenestespesifikasjon/no/nav/virksomhet/tjenester/person"
    xmlns:out8="http://nav-person-tjenestespesifikasjon/no/nav/virksomhet/part/person"
    xmlns:io5="http://nav-tjeneste-person/no/nav/asbo"
    xmlns:io="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:out2="http://nav.no/virksomhet/tjenester/person/feil/v1"
    xmlns:io6="http://nav.no/virksomhet/tjenester/felles/v1"
    xmlns:io2="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:io7="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:out3="wsdl.http://nav.no/virksomhet/tjenester/person/v1"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io8="http://www.w3.org/2005/08/addressing"
    xmlns:out4="http://nav.no/virksomhet/tjenester/person/meldinger/v1"
    xmlns:out5="http://nav-person-tjenestespesifikasjon/no/nav/virksomhet/tjenester/person/meldinger"
    xmlns:map="http://nav-tjeneste-person/no/nav/xslt/XSLTransformation1_req_1"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="xalan str set msl math map exsl date"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <dataObject>
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'io4:ServiceMessageObject'"/>
            </xsl:attribute>
            <xsl:call-template name="map:MapFaultPersonIkkeFunnet2">
              <xsl:with-param name="smo" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </dataObject>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="io4:smo" mode="map:MapFaultPersonIkkeFunnet"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "io4:smo" to "io4:smo".  -->
  <xsl:template match="io4:smo"  mode="map:MapFaultPersonIkkeFunnet">
    <io4:smo>
      <!-- a structural mapping: "context"(<Anonymous>) to "body"(hentPerson_PersonIkkeFunnet) -->
      <xsl:apply-templates select="context" mode="localContextToBody_820011716"/>
    </io4:smo>
  </xsl:template>

  <!-- This rule represents a type mapping: "io4:smo" to "io4:smo".  -->
  <xsl:template name="map:MapFaultPersonIkkeFunnet2">
    <xsl:param name="smo"/>
    <!-- a structural mapping: "$smo/context"(<Anonymous>) to "body"(hentPerson_PersonIkkeFunnet) -->
    <xsl:apply-templates select="$smo/context" mode="localContextToBody_820011716"/>
  </xsl:template>

  <!-- This rule represents an element mapping: "context" to "body".  -->
  <xsl:template match="context"  mode="localContextToBody_820011716">
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out3:hentPerson_PersonIkkeFunnet'"/>
      </xsl:attribute>
      <!-- a structural mapping: "shared"(TPSPersonSharedContext) to "out:hentPersonPersonIkkeFunnet"(PersonIkkeFunnet) -->
      <xsl:apply-templates select="shared" mode="localSharedToHentPersonPersonIkkeFunnet_1714112991"/>
    </body>
  </xsl:template>

  <!-- This rule represents an element mapping: "shared" to "out:hentPersonPersonIkkeFunnet".  -->
  <xsl:template match="shared"  mode="localSharedToHentPersonPersonIkkeFunnet_1714112991">
    <out:hentPersonPersonIkkeFunnet>
      <!-- a simple data mapping: "fault/errorMessage"(string) to "errorMessage"(string) -->
      <xsl:if test="fault/errorMessage">
        <errorMessage>
          <xsl:value-of select="fault/errorMessage"/>
        </errorMessage>
      </xsl:if>
      <!-- a simple data mapping: "fault/errorSource"(string) to "errorSource"(string) -->
      <xsl:if test="fault/errorSource">
        <errorSource>
          <xsl:value-of select="fault/errorSource"/>
        </errorSource>
      </xsl:if>
      <!-- a simple data mapping: "fault/errorType"(string) to "errorType"(string) -->
      <xsl:if test="fault/errorType">
        <errorType>
          <xsl:value-of select="fault/errorType"/>
        </errorType>
      </xsl:if>
      <!-- a simple data mapping: "fault/rootCause"(string) to "rootCause"(string) -->
      <xsl:if test="fault/rootCause">
        <rootCause>
          <xsl:value-of select="fault/rootCause"/>
        </rootCause>
      </xsl:if>
      <!-- a simple data mapping: "fault/dateTimeStamp"(string) to "dateTimeStamp"(string) -->
      <xsl:if test="fault/dateTimeStamp">
        <dateTimeStamp>
          <xsl:value-of select="fault/dateTimeStamp"/>
        </dateTimeStamp>
      </xsl:if>
    </out:hentPersonPersonIkkeFunnet>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>

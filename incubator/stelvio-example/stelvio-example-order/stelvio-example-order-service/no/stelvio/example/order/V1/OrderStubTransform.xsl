<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="no/stelvio/example/order/V1/OrderStubTransform.map" md5sum="e752e58afe2a532dcaecd16ea47f2e6e" version="7.0.101" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.101
*
*   Mapping file:		OrderStubTransform.map
*   Map declaration(s):	OrderStubTransform
*   Input file(s):		http://www.w3.org/2001/XMLSchema
*   Output file(s):		file:/E:/develop/stelvio/incubator/stelvio-example/stelvio-example-order/stelvio-example-order-lib/no/stelvio/example/order/V1/Order.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:out="http://www.stelvio.no/example/order/V1"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:out2="http://www.stelvio.no/example/common/V1"
    xmlns:map="http://www.stelvio.no/example/order/V1/OrderStubTransform"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="map xalan msl"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <msl:datamap>
      <dataObject>
        <xsl:attribute name="xsi:type">
          <xsl:value-of select="'out:Order'"/>
        </xsl:attribute>
        <xsl:call-template name="map:OrderStubTransform">
          <xsl:with-param name="anyType" select="msl:datamap/dataObject[1]"/>
        </xsl:call-template>
      </dataObject>
    </msl:datamap>
  </xsl:template>

  <!-- This rule represents a type mapping: "anyType" to "out:Order".  -->
  <xsl:template name="map:OrderStubTransform">
    <xsl:param name="anyType"/>
    <!-- a simple mapping with no associated source:  to "id"(string) -->
    <id>
      <xsl:text>orderId</xsl:text>
    </id>
    <!-- a simple mapping with no associated source:  to "customerId"(string) -->
    <customerId>
      <xsl:text>customerId</xsl:text>
    </customerId>
    <orderLineItem>
      <!-- a simple mapping with no associated source:  to "id"(string) -->
      <id>
        <xsl:text>orderLineItemId</xsl:text>
      </id>
      <!-- a simple mapping with no associated source:  to "productId"(string) -->
      <productId>
        <xsl:text>productId</xsl:text>
      </productId>
      <!-- a simple mapping with no associated source:  to "quantity"(int) -->
      <quantity>
        <xsl:text>10</xsl:text>
      </quantity>
      <additionalInfo>
        <discount>
          <!-- a simple mapping with no associated source:  to "sinceVersion"(string) -->
          <xsl:attribute name="sinceVersion">
            <xsl:value-of select="'1.1'"/>
          </xsl:attribute>
          <!-- a simple content mapping -->
          <xsl:text>0.30</xsl:text>
        </discount>
      </additionalInfo>
    </orderLineItem>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>

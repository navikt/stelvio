#
# Licensed Materials - Property of IBM
# 5655-FLW (C) Copyright IBM Corporation 2004, 2006. All Rights Reserved.
# US Government Users Restricted Rights- Use, duplication or disclosure
# restricted by GSA ADP Schedule Contract with IBM Corp.
#

#*******************************************************************************************************
# Load library procedures
#*******************************************************************************************************
if {[array names env "wbi.install.root"] == ""} {
  # workaround until the WBI installer sets 'wbi.install.root'
  set env(wbi.install.root) [pwd]
  while {![file isdirectory "$env(wbi.install.root)/ProcessChoreographer"]} {
    set dir [file dirname $env(wbi.install.root)]
    if {${dir} == $env(wbi.install.root)} {
      set env(wbi.install.root) $env(was.install.root)
      break
    }
    set env(wbi.install.root) ${dir}
  }
}
set "bpelib.getopt" 1
puts "$env(wbi.install.root)/ProcessChoreographer/config/bpelib.jacl"
if {[file exists "$env(wbi.install.root)/ProcessChoreographer/config/bpelib.jacl"]} {
  source "$env(wbi.install.root)/ProcessChoreographer/config/bpelib.jacl"
} else {
  puts "bpelib.jacl not found. Aborting..."
  exit 1
}

proc findCellName {} {
  global env AdminConfig
  set cells [$AdminConfig list Cell]

  foreach cell $cells {
    set cellName [$AdminConfig showAttribute $cell "name"]
    return $cellName
  }
}

#*******************************************************************************************************
# Change the state for all process and task templates of a given enterprise application
#*******************************************************************************************************
proc changeBPCTemplateState {appName message bfmMethod htmMethod state} {
  global env AdminConfig AdminControl

  # 1. Find the enterprise application ----------------------------------------

  array set target [uniqueDeploymentTarget ${appName}]

  if {[array names target] == ""} {
    return 1
  }

  # 2. Find the ProcessContainer MBean to connect to --------------------------

  # May be a 'ServerTarget' with attributes 'name' and 'nodeName' or a 'ClusterTarget' with attribute 'name'.
  # Get all attributes and convert them to an array ('$AdminConfig show' for a non-existant attribute throws an
  # error, but now we can use 'array names')

  set bfmMBean ""
  set htmMBean ""
  if {[array names target "nodeName"] == ""} {
    set clusterName $target(name)
    set cellName [findCellName]
    puts $cellName
    set cluster [$AdminConfig getid "/Cell:${cellName}/ServerCluster:${clusterName}/"]
    foreach member [$AdminConfig list ClusterMember ${cluster}] {
      set nodeName [$AdminConfig showAttribute ${member} "nodeName"]
      set serverName [$AdminConfig showAttribute ${member} "memberName"]
      if {${bfmMBean} == ""} {
        set bfmMBean [$AdminControl completeObjectName "type=ProcessContainer,node=${nodeName},process=${serverName},*"]
      }
      if {${htmMBean} == ""} {
        set htmMBean [$AdminControl completeObjectName "type=TaskManager,node=${nodeName},process=${serverName},*"]
      }
      if {${bfmMBean} != "" && ${htmMBean} != ""} {
        break
      }
    }
    msg "Appplication '${appName}' is deployed on cluster '${clusterName}'"
  } else {
    set nodeName $target(nodeName)
    set serverName $target(name)
    set bfmMBean [$AdminControl completeObjectName "type=ProcessContainer,node=${nodeName},process=${serverName},*"]
    set htmMBean [$AdminControl completeObjectName "type=TaskManager,node=${nodeName},process=${serverName},*"]
    msg "Appplication '${appName}' is deployed on server '${serverName}' of node '${nodeName}'"
  }

  if {${bfmMBean} == ""} {
    msg "Error: Could not find ProcessContainer MBean."
    return 0
  }
  if {${htmMBean} == ""} {
    msg "Error: Could not find TaskManager MBean."
    return 0
  }

  # ${::Help} all $bfmMBean

  # claimsHandlingProcess(cells/vienna/applications/BPELClaimsHandling.ear/deployments/BPELClaimsHandling|deployment.xml#Deployment_1073642403600)
  # ==>
  # (cells/vienna/applications/BPELClaimsHandling.ear/deployments/BPELClaimsHandling:
  log "Debug: target=$target(deployment)"
  regexp "${appName}(\\(\[^\\|\]*)\\|" $target(deployment) match deployment
  if {![info exists deployment]} {
    msg "  Error: xmi::id not matched ($target(deployment))."
    return 0
  }
  log "Debug: deployment=${deployment}"

  # 3. Collect all process templates for the given application ----------------

  set templates {}
  foreach template [$AdminConfig list ProcessComponent] { ;# unfortunately, 'ProcessComponent' cannot be scoped
    # try to match by id, for example
    # claimsHandlingProcess(cells/vienna/applications/BPELClaimsHandling.ear/deployments/BPELClaimsHandling|deployment_wbi.xml#ProcessComponent_1073642403600)
    #                      +-------------------------------------------------------------------------------+
    log "Debug: checking ${template}"
    if {[regexp "\[^(\]*\\${deployment}\\|" ${template} match]} {
      log "Debug: ${template} matched '${match}'"
      lappend templates ${template}
    }
  }

  if {[llength ${templates}] == 0} {
    msg "  No process templates found in '${appName}'."
  } else {
    # 5. For each template, update the state in both the Process Choreographer database
    #    and in the WebSphere configuration (which is used by the Admin Console).
    foreach template ${templates} {
      set validFrom [java::new {com.ibm.bpe.api.UTCDate long} [$AdminConfig showAttribute ${template} validFrom]]
      msg "  ${message} '[$AdminConfig showAttribute $template name]', valid from [${validFrom} toString]"
      # @TBD:
      # [5/30/03 15:47:05:137 CEST] 30321f3b ConnectionMan W J2CA0075W: An active transaction should be present while processing method allocateMCWrapper.
      # [5/30/03 15:47:05:167 CEST] 30321f3b ConnectionMan W J2CA0075W: An active transaction should be present while processing method initializeForUOW.
      $AdminControl invoke ${bfmMBean} ${bfmMethod} [list [$AdminConfig showAttribute ${template} "name"] [$AdminConfig showAttribute ${template} "validFrom"]]
      $AdminConfig modify [$AdminConfig showAttribute $template "stateManagement"] [list [list "initialState" "${state}"]]
    }
  }

  # 6. Collect all task templates for the given application ----------------

  set templates {}
  foreach template [$AdminConfig list TaskComponent] { ;# unfortunately, 'TaskComponent' cannot be scoped
    # try to match by id, for example
    # claimsHandlingProcess(cells/vienna/applications/BPELClaimsHandling.ear/deployments/BPELClaimsHandling|deployment_wbi.xml#ProcessComponent_1073642403600)
    #                      +-------------------------------------------------------------------------------+
    log "Debug: checking ${template}"
    if {[regexp "\[^(\]*\\${deployment}\\|" ${template} match]} {
      log "Debug: ${template} matched '${match}'"
      lappend templates ${template}
    }
  }

  if {[llength ${templates}] == 0} {
    msg "  No task templates found in '${appName}'."
  } else {
    # 7. For each template, update the state in both the Process Choreographer database
    #    and in the WebSphere configuration (which is used by the Admin Console).
    foreach template ${templates} {
      set validFrom [java::new {com.ibm.bpe.api.UTCDate long} [$AdminConfig showAttribute ${template} validFrom]]
      msg "  ${message} '[$AdminConfig showAttribute ${template} name]', valid from [${validFrom} toString], namespace [$AdminConfig showAttribute ${template} namespace]"
      # @TBD:
      # [5/30/03 15:47:05:137 CEST] 30321f3b ConnectionMan W J2CA0075W: An active transaction should be present while processing method allocateMCWrapper.
      # [5/30/03 15:47:05:167 CEST] 30321f3b ConnectionMan W J2CA0075W: An active transaction should be present while processing method initializeForUOW.
      $AdminControl invoke ${htmMBean} ${htmMethod} [list [$AdminConfig showAttribute ${template} "name"] [$AdminConfig showAttribute ${template} "validFrom"] [$AdminConfig showAttribute ${template} "namespace"]]
      $AdminConfig modify [$AdminConfig showAttribute ${template} "stateManagement"] [list [list "initialState" "${state}"]]
    }
  }

  return 0
}

#*******************************************************************************************************
# Start all process and task templates of a given enterprise application
#*******************************************************************************************************
proc startBPCTemplates {appName} {
  global AdminConfig
  if {[catch { changeBPCTemplateState ${appName} "Starting" "startProcessTemplate" "startTaskTemplate" "START" } error]} {
    msg "Error starting ${appName} templates: ${error}."
  }
  $AdminConfig save
}

#*******************************************************************************************************
# Stop all process and task templates of a given enterprise application
#*******************************************************************************************************
proc stopBPCTemplates {appName} {
  global AdminConfig
  if {[catch { changeBPCTemplateState  ${appName} "Stopping" "stopProcessTemplate" "stopTaskTemplate" "STOP" } error]} {
    msg "Error stopping ${appName} templates: ${error}."
  }
  $AdminConfig save
}

#*******************************************************************************************************
# Stop all process and task templates of a given enterprise application, then uninstall it
#*******************************************************************************************************
proc uninstall {appName force} {
  global AdminApp AdminConfig
  if {${force}} {
    set bfmMethodName "stopProcessTemplateAndDeleteInstancesForced"
    set htmMethodName "stopTaskTemplateAndDeleteInstancesForced"
  } else {
    set bfmMethodName "stopProcessTemplate"
    set htmMethodName "stopTaskTemplate"
  }
  if {[catch { changeBPCTemplateState  ${appName} "Stopping" ${bfmMethodName} ${htmMethodName} "STOP"
               $AdminApp uninstall ${appName} } error]} {
    msg "Error stopping and uninstalling ${appName}: ${error}."
  }
  $AdminConfig save
}

#*******************************************************************************************************
# Check for invocation errors then execute
#*******************************************************************************************************
puts ""
if {![info exists start] && ![info exists stop] && ![info exists uninstall] || [connectionStatus] != "CONNECTED"} {
  msg "Usage: wsadmin -f bpcTemplates.jacl -start <app_name>"
  msg "       wsadmin -f bpcTemplates.jacl -stop <app_name>"
  msg {       wsadmin -f bpcTemplates.jacl -uninstall <app_name> [-force]}
  msg ""
  msg "Starts or stops all process and task templates of a given enterprise application."
  msg "Before uninstalling, the process and task templates of the enterprise application"
  msg "are stopped."
  msg "CAUTION! If you specify -force, all instances of the passed enterprise application's"
  msg "templates are delete - even if they are currently running."
  msg ""
  msg "Note that the scripting client must be connected to a running server. That is,"
  msg "you must not use wsadmin's '-conntype NONE' command line argument."
  msg ""
  exit 1
}

puts "******************************************************************************"
puts "* DISCLAIMER: This sample script is provided AS-IS for your convenience.     *"
puts "* It is recommended to use the Administrative Console to start and stop      *"
puts "* process and task templates.                                                *"
puts "******************************************************************************"
puts ""

if {[info exists start]} {
  startBPCTemplates ${start}
}

if {[info exists stop]} {
  stopBPCTemplates ${stop}
}

if {[info exists uninstall]} {
  if {[info exists force]} {
    set force true
  } else {
    set force false
  }
  uninstall ${uninstall} ${force}
}


package no.nav.maven.plugin.sca;

import java.io.File;
import java.io.IOException;

import org.apache.maven.plugin.AbstractMojo;
import org.apache.maven.plugin.MojoExecutionException;
import org.apache.maven.plugin.MojoFailureException;
import org.apache.xmlbeans.XmlException;
import org.codehaus.plexus.archiver.Archiver;
import org.codehaus.plexus.archiver.ArchiverException;
import org.codehaus.plexus.archiver.UnArchiver;

import com.sun.java.xml.ns.j2Ee.ApplicationDocument;
import com.sun.java.xml.ns.j2Ee.ApplicationType;
import com.sun.java.xml.ns.j2Ee.DisplayNameType;

/**
 * Goal which updates the ear file generated by service deploy.
 * 
 * @author test@example.com
 * 
 * @goal update-ear
 */
public class UpdateEarMojo extends AbstractMojo {
	/**
	 * @component roleHint="zip"
	 * @required
	 * @readonly
	 */
	private UnArchiver unArchiver;

	/**
	 * @component roleHint="zip"
	 * @required
	 * @readonly
	 */
	private Archiver archiver;

	/**
	 * @parameter expression="${project.artifact.file}"
	 * @required
	 * @readonly
	 */
	private File mainArtifactFile;

	/**
	 * Defines the assembly type to use. Valid values are zip [default] and pi
	 * (project interchange).
	 * 
	 * @parameter default-value="${project.build.finalName}"
	 */
	private String displayName;

	public void execute() throws MojoExecutionException, MojoFailureException {
		File tempDir = null;
		try {
			tempDir = createTempDir();

			extract(tempDir);

			updateArchive(tempDir);

			createArchive(tempDir);
		} finally {
			if (tempDir != null) {
				tempDir.delete();
			}
		}
	}

	private void updateArchive(File tempDir) throws MojoExecutionException {
		try {
			File applicationXmlFile = new File(new File(tempDir, "META-INF"), "application.xml");
			ApplicationDocument applicationDocument = ApplicationDocument.Factory.parse(applicationXmlFile);
			
			DisplayNameType displayName = applicationDocument.getApplication().getDisplayNameArray(0);
			displayName.setStringValue(this.displayName);
			
			applicationDocument.save(applicationXmlFile);
		} catch (XmlException e) {
			throw new MojoExecutionException("An error occured when updating archive", e);
		} catch (IOException e) {
			throw new MojoExecutionException("An error occured when updating archive", e);
		}
	}

	private void createArchive(File tempDir) throws MojoExecutionException {
		try {
			archiver.addDirectory(tempDir);
			archiver.setDestFile(mainArtifactFile);
			archiver.createArchive();
		} catch (ArchiverException e) {
			throw new MojoExecutionException("An error occured when creating archive", e);
		} catch (IOException e) {
			throw new MojoExecutionException("An error occured when creating archive", e);
		}
	}

	private void extract(File tempDir) throws MojoExecutionException {
		try {
			unArchiver.setDestDirectory(tempDir);
			unArchiver.setSourceFile(mainArtifactFile);
			unArchiver.extract();
		} catch (ArchiverException e) {
			throw new MojoExecutionException("An error occured when extracting archive", e);
		} catch (IOException e) {
			throw new MojoExecutionException("An error occured when extracting archive", e);
		}
	}

	private File createTempDir() throws MojoExecutionException {
		try {
			File tempDir = File.createTempFile(displayName, ".ear");
			tempDir.delete();
			tempDir.mkdir();
			tempDir.deleteOnExit();
			return tempDir;
		} catch (IOException e) {
			throw new MojoExecutionException("Error creating tempDir", e);
		}
	}

}

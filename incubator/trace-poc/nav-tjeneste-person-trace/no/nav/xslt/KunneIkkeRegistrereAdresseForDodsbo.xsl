<?xml version="1.0" encoding="UTF-8"?>
<!-- @generated mapFile="no/nav/xslt/KunneIkkeRegistrereAdresseForDodsbo.map" md5sum="f78676c0edc70ea3a1c3acd4d15b6d41" version="7.0.302" -->
<!--
*****************************************************************************
*   This file has been generated by the IBM XML Mapping Editor V7.0.302
*
*   Mapping file:		KunneIkkeRegistrereAdresseForDodsbo.map
*   Map declaration(s):	KunneIkkeRegistrereAdresseForDodsbo
*   Input file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252Fnav-lib-frg-tps%252Fno%252Fnav%252Flib%252Ffrg%252Finf%257DhentTPSDataResponseMsg/xpath%3D%252Fbody/smo.xsd
*   Output file(s):		smo://smo/name%3Dwsdl-primary/message%3D%257Bhttp%253A%252F%252Fnav.no%252Fvirksomhet%252Ftjenester%252Fperson%252Fv1%257DregistrereAdresseForDodsbo_kunneIkkeRegistrereAdresseForDodsbo/xpath%3D%252Fbody/smo.xsd
*
*   Note: Do not modify the contents of this file as it is overwritten
*         each time the mapping model is updated.
*****************************************************************************
-->
<xsl:stylesheet
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xalan="http://xml.apache.org/xslt"
    xmlns:str="http://exslt.org/strings"
    xmlns:set="http://exslt.org/sets"
    xmlns:math="http://exslt.org/math"
    xmlns:exsl="http://exslt.org/common"
    xmlns:date="http://exslt.org/dates-and-times"
    xmlns:in="http://nav-lib-frg-tps/no/nav/lib/frg/tps/fault"
    xmlns:in2="http://nav-lib-frg-tps/no/nav/lib/frg/inf"
    xmlns:in3="wsdl.http://nav-lib-frg-tps/no/nav/lib/frg/inf"
    xmlns:io="http://www.w3.org/2003/05/soap-envelope"
    xmlns:io2="http://www.ibm.com/websphere/sibx/smo/v6.0.1"
    xmlns:out="http://nav.no/virksomhet/part/person/v1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:out2="http://nav.no/virksomhet/tjenester/person/v1"
    xmlns:io3="http://www.ibm.com/xmlns/prod/websphere/mq/sca/6.0.0"
    xmlns:out3="http://nav.no/virksomhet/tjenester/person/feil/v1"
    xmlns:io4="http://schemas.xmlsoap.org/ws/2004/08/addressing"
    xmlns:out4="http://nav.no/virksomhet/tjenester/felles/v1"
    xmlns:io5="http://www.ibm.com/xmlns/prod/websphere/http/sca/6.1.0"
    xmlns:out5="wsdl.http://nav.no/virksomhet/tjenester/person/v1"
    xmlns:xsd="http://www.w3.org/2001/XMLSchema"
    xmlns:io6="http://www.w3.org/2005/08/addressing"
    xmlns:out6="http://nav.no/virksomhet/tjenester/person/meldinger/v1"
    xmlns:map="http://nav-tjeneste-person/no/nav/xslt/KunneIkkeRegistrereAdresseForDodsbo"
    xmlns:msl="http://www.ibm.com/xmlmap"
    exclude-result-prefixes="xalan str set in msl math map exsl in2 date in3"
    version="1.0">
  <xsl:output method="xml" encoding="UTF-8" indent="no"/>

  <!-- root wrapper template  -->
  <xsl:template match="/">
    <xsl:choose>
      <xsl:when test="msl:datamap">
        <msl:datamap>
          <dataObject>
            <xsl:attribute name="xsi:type">
              <xsl:value-of select="'out5:registrereAdresseForDodsbo_kunneIkkeRegistrereAdresseForDodsbo'"/>
            </xsl:attribute>
            <xsl:call-template name="map:KunneIkkeRegistrereAdresseForDodsbo2">
              <xsl:with-param name="body" select="msl:datamap/dataObject[1]"/>
            </xsl:call-template>
          </dataObject>
        </msl:datamap>
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="body" mode="map:KunneIkkeRegistrereAdresseForDodsbo"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>

  <!-- This rule represents an element mapping: "body" to "body".  -->
  <xsl:template match="body"  mode="map:KunneIkkeRegistrereAdresseForDodsbo">
    <body>
      <xsl:attribute name="xsi:type">
        <xsl:value-of select="'out5:registrereAdresseForDodsbo_kunneIkkeRegistrereAdresseForDodsbo'"/>
      </xsl:attribute>
      <!-- a structural mapping: "in2:hentTPSDataResponse"(<Anonymous>) to "out2:registrereAdresseForDodsbokunneIkkeRegistrereAdresseForDodsbo"(KunneIkkeRegistrereAdresseForDodsbo) -->
      <xsl:apply-templates select="in2:hentTPSDataResponse" mode="localHentTPSDataResponseToRegistrereAdresseForDodsbokunneIkkeRegistrereAdresseForDodsbo_544187697"/>
    </body>
  </xsl:template>

  <!-- This rule represents a type mapping: "body" to "body".  -->
  <xsl:template name="map:KunneIkkeRegistrereAdresseForDodsbo2">
    <xsl:param name="body"/>
    <!-- a structural mapping: "$body/in2:hentTPSDataResponse"(<Anonymous>) to "out2:registrereAdresseForDodsbokunneIkkeRegistrereAdresseForDodsbo"(KunneIkkeRegistrereAdresseForDodsbo) -->
    <xsl:apply-templates select="$body/in2:hentTPSDataResponse" mode="localHentTPSDataResponseToRegistrereAdresseForDodsbokunneIkkeRegistrereAdresseForDodsbo_544187697"/>
  </xsl:template>

  <!-- This rule represents an element mapping: "in2:hentTPSDataResponse" to "out2:registrereAdresseForDodsbokunneIkkeRegistrereAdresseForDodsbo".  -->
  <xsl:template match="in2:hentTPSDataResponse"  mode="localHentTPSDataResponseToRegistrereAdresseForDodsbokunneIkkeRegistrereAdresseForDodsbo_544187697">
    <out2:registrereAdresseForDodsbokunneIkkeRegistrereAdresseForDodsbo>
      <!-- a simple data mapping: "tpsPersonDataRes/tpsSvar/svarStatus/utfyllendeMelding"(string) to "errorMessage"(string) -->
      <xsl:if test="tpsPersonDataRes/tpsSvar/svarStatus/utfyllendeMelding">
        <errorMessage>
          <xsl:value-of select="tpsPersonDataRes/tpsSvar/svarStatus/utfyllendeMelding"/>
        </errorMessage>
      </xsl:if>
      <!-- a simple mapping with no associated source:  to "errorSource"(string) -->
      <errorSource>
        <xsl:text>nav-tjeneste-person _ RegistrereAdresseForDødsbo _ KunneIkkeRegistrereAdresseForDødsbo!</xsl:text>
      </errorSource>
      <!-- a simple data mapping: "tpsPersonDataRes/tpsSvar/svarStatus/returStatus"(TreturStatus) to "errorType"(string) -->
      <xsl:if test="tpsPersonDataRes/tpsSvar/svarStatus/returStatus">
        <errorType>
          <xsl:value-of select="tpsPersonDataRes/tpsSvar/svarStatus/returStatus"/>
        </errorType>
      </xsl:if>
      <!-- a simple data mapping: "tpsPersonDataRes/tpsSvar/svarStatus/returMelding"(string) to "rootCause"(string) -->
      <xsl:if test="tpsPersonDataRes/tpsSvar/svarStatus/returMelding">
        <rootCause>
          <xsl:value-of select="tpsPersonDataRes/tpsSvar/svarStatus/returMelding"/>
        </rootCause>
      </xsl:if>
    </out2:registrereAdresseForDodsbokunneIkkeRegistrereAdresseForDodsbo>
  </xsl:template>

  <!-- *****************    Utility Templates    ******************  -->
  <!-- copy the namespace declarations from the source to the target -->
  <xsl:template name="copyNamespaceDeclarations">
    <xsl:param name="root"/>
    <xsl:for-each select="$root/namespace::*">
      <xsl:copy/>
    </xsl:for-each>
  </xsl:template>
</xsl:stylesheet>

<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Guide BusinessService</title>
	</properties>
	<body>
		<section name="Guide BusinessService">

			<subsection name="Oversikt">

				<p>
					<i>BusinessService</i>
					er en mal for hvordan forretningstjenester skal implementeres. En forretningstjeneste implementerer applikasjonsspesifikk logikk som for eksempel beregninger, beslutningsprosesser, osv. Tjenestene implementeres etter samme mal for å forenkle utvikling og vedlikehold av logikken.
				</p>

			</subsection>

			<subsection name="Retningslinjer for implementering av forretningstjenester">

				<p>Alle klasser som implementerer forretningslogikk skal følge retningslinjene som er skissert nedenfor.</p>
				<ul>
					<li>
						Klassene skal arve
						<a href="../apidocs/no/stelvio/business/framework/service/BusinessService.html">
                            no.stelvio.business.framework.service.BusinessService
                        </a>
						<br />
					</li>
					<li>
						Pakken som klassene legges i skal navngis etter følgende standard:
						<br />
                        no.stelvio.business.
                        <font color="blue">[applikasjon]</font>
						.
						<font color="blue">[funksjonelt område]</font>
						.
						<br />
					</li>
					<li>
						Klassennavn skal være på norsk, men uten de norske tegnene
						<i>æ</i>
						,
						<i>ø</i>
						og
						<i>å</i>
						. Disse bokstavene erstattes hhv av
						<i>e</i>
						,
						<i>o</i>
						og
						<i>a</i>
						.
						<br />
					</li>
					<li>
						Klassenavn skal være korte, beskrivende og i imperativ. For eksempel bør en tjeneste som sletter en henvendelse hete
						<i>SlettHenvendelseService</i>
						. Tjenestens ID (navn/alias/nøkkel) skal være det samme som klassenavnet.
						<br />
					</li>
					<li>
						Det skal ikke implementeres klassevariabler eller instansvariabler i tjenestene, kun lokale variabler deklarert inne i metodene. Dette er viktig for å sikre at funksjonaliteten er "thread safe".
						<br />
					</li>
					<li>
						Hver tjeneste må ha en default kontruktør uten parametre (f.eks.
						<code>public OpprettOppgaveService() {...}</code>
						) for at tjenestene skal kunne instansieres dynamisk vha reflection.
						<br />
					</li>
					<li>
						Referanser til andre klasser skal unngås så langt som mulig. Benytt referanser til interface istedenfor som vist i eksempelet nedenfor. Dette fremmer løskobling og testbarhet av klassene.
						<br />
					</li>
				</ul>

			</subsection>

			<subsection name="Hvordan implementere og benytte en forretningstjeneste">

				<h4>OGS020OppgavelisteAction.java</h4>
				<p>
					Eksempelet nedenfor viser hvordan en
					<i>Struts Action</i>
					klasse kan benytte en
					<i>BusinessDelegate</i>
					for å utføre forretningslogikk.
				</p>
<source><![CDATA[package no.stelvio.web.saksbehandling.action.oppgave;

...

public class OGS020OppgavelisteAction extends FindDispatchAction {

...
  
   public ActionForward executeLoad(
      ActionMapping mapping,
      ActionForm form,
      HttpServletRequest request,
      HttpServletResponse response)
      throws ApplicationException {
      ...
      ServiceRequest input = new ServiceRequest("HentOppgavelister");
      input.setData("ident", "psa2920");
      input.setData("tknr", "TK1232");
      
      ServiceResponse output = super.getBusinessDelegate().execute(input);
      OppgavelisteNode tre = (OppgavelisteNode) output.getData("mappestruktur");
      ...
   }
...
}]]></source>

				<h4>HentOppgavelisterService.java:</h4>
				<p>Eksempelet nedenfor viser hvordan forretningslogikken implementeres, og hvordan hibernate kan benyttes fra forretningslogikken.</p>
<source><![CDATA[package no.stelvio.business.oppgaver.service;

import java.util.List;

import net.sf.hibernate.Query;

import no.stelvio.common.domain.oppgave.Oppgaveliste;
import no.stelvio.common.domain.oppgave.OppgavelisteNode;
import no.stelvio.common.framework.service.ServiceFailedException;
import no.stelvio.common.framework.service.ServiceRequest;
import no.stelvio.common.framework.service.ServiceResponse;

import no.stelvio.business.oppgaver.constants.OppgaveConstants;

import no.stelvio.integration.framework.hibernate.service.BusinessHibernateService;

public class HentOppgavelisterService extends BusinessHibernateService {
	
	
	// Metoden som implementerer forretningslogikken
	protected ServiceResponse doExecute( ServiceRequest request ) throws ServiceFailedException {
	   
	   String ident = (String) request.getData("ident");
	   String tknr = (String) request.getData("tknr");
	   
	   //	Obtain an instance of the named Query defined in the Hibernate mapping file
	   Query query = hibernate.getNamedQuery("OPPGAVELISTER_BY_TKNR");
	   
	   // Specify the query parameters
	   query.setString("tknr", tknr);
	   
	   // Execute the query and return the result
	   List oppgavelister = hibernate.getList(query);
	   
	   OppgavelisteNode rot = null;
	   if (null != oppgavelister) {
	      rot = new OppgavelisteNode(tknr);
			for (int i = 0; i < oppgavelister.size(); i++) {
				Oppgaveliste liste = (Oppgaveliste) oppgavelister.get(i);

				// Organiser oppgavelistene etter ident, og slå sammen alle andres identer til en felles type
				if (null == liste.getAnsvarligIdent()) {
					liste.setAnsvarligIdent(OppgaveConstants.UFORDELTE_OPPGAVER);
				} else if (liste.getAnsvarligIdent().equals(TransactionContext.getUserId())) {
					liste.setAnsvarligIdent(OppgaveConstants.EGNE_OPPGAVER);
				} else {
					liste.setAnsvarligIdent(OppgaveConstants.ANDRES_OPPGAVER);
				}

				// Organiser oppgavelistene i en trestruktur
				rot.add(liste);
			}
		}
		return new ServiceResponse("mappestruktur", rot);
	}
}]]></source>

			</subsection>

			<subsection name="Hvordan konfigurere forretningstjenesten?">

				<h4>distributed-services.xml:</h4>
				<p>
					<i>distributed-services.xml</i>
					definerer hvilke distribuerte tjenester som skal være tilgjengelig. I presentasjonslaget benytter en
					<i>BusinessDelegate</i>
					en
					<i>RemoteServiceLocator</i>
					som har referanse til denne filen.
				</p>
				<p>Eksempelet nedenfor viser hvordan forretningsfasaden kan konfigureres.</p>
<source><![CDATA[<beans>
   ...
   <bean id="BusinessFacade" class="no.stelvio.common.framework.ejb.RemoteServiceDescription">
      <property name="jndiName"> ejb/no/stelvio/business/BusinessFacade </property>
      <property name="providerUrl"> localhost </property>
      <property name="initialContextFactory"> com.ibm.websphere.naming.WsnInitialContextFactory </property>
      <property name="urlPkgPrefixes"> com.ibm.runtime:com.ibm.ws.naming:com.ibm.websphere.naming </property>
      <property name="securityPrincipal"> aspecialuser </property>
      <property name="securityCredentials"> hissecretpassword </property>
      <property name="cacheable"> true </property>
   </bean>
   ...
</beans>]]></source>

				<h4>application-services.xml:</h4>
				<p>
					<i>application-services.xml</i>
					definerer hvilke lokale tjenester som skal være tilgjengelig under forretningsfasaden. En
					<i>BusinessFacadeBean</i>
					benytter
					<i>ApplicationServiceLocator</i>
					med referanse til denne konfigurasjonsfilen.
				</p>

<source><![CDATA[<beans>

	<bean id="HibernateHelper_GenerellSak" class="HibernateHelperImpl.HibernateHelperImpl">
		<constructor-arg>
			<value>hibernate.cfg.xml</value>
		</constructor-arg>
	</bean>
	
	<bean id="HentOppgavelister" class="no.stelvio.business.oppgaver.service.HentOppgavelisterService">
		<property name="hibernateHelper">
			<ref bean="HibernateHelper_GenerellSak" />
		</property>
	</bean>
	
	...
	
</beans>]]></source>

			</subsection>

			<subsection name="Endringslogg">
				<source>
					<![CDATA[
$Log$
Revision 1.4  2004/08/31 14:19:15  tsb2920
Moved BusinessHibernateService

Revision 1.3  2004/06/21 14:24:10  psa2920
oppdatert eksempelkoden

Revision 1.2  2004/06/18 10:10:53  psa2920
la til endringslogg
]]>
				</source>
			</subsection>

		</section>
	</body>
</document>


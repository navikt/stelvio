<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Logging</title>
	</properties>
	<body>
		<section name="Logging">
			<subsection name="Oversikt">
				<p>Logging komponenten består av to open source prosjekter: Jakarta commons-logging og Log4j. Log4j er et meget utbredt API for logging til diverse medier, f.eks. konsoll, fil eller JMS. Jakarta commons-logging er et API som tilbyr er felles grensesnitt over andre log implementasjoner, f.eks. Log4j.</p>
				<p>
					Noen tilpasninger er nødvendige til Log4j og commons-logging for å få ønsket funksjonalitet:
					<ul>
						<li>Logging til JMS-køer.</li>
						<li>Administrasjon av logging oppsettet.</li>
						<li>Log4j skal settes opp til å sjekke oppdateringer på konfigurasjonsfilen hvert 60. sekund.</li>
					</ul>
				</p>


			</subsection>
			<subsection name="Logging til JMS-køer">
				<p>
					Log4j benytter seg av <i>appenders</i> for å implementere støtte for logging til diverse medier. Log4j støtter allrede logging til JMS topics, men ikke JMS queues. Kildekoden til en JMSQueueAppender følger med Log4j distribusjonen, men dette er ikke en del av "standardpakken". Denne kildekoden kan gjenbrukes med noen endringer.
				</p>
				<h4>JMSQueueAppender</h4>
				<p>
					Versjonen som følger med Log4j benytter en<i>javax.jms.ObjectMessage</i>, men grunnet systemet som skal motta meldingen så er kravet at dette må være en <i>javax.jms.TextMessage</i>.
				</p>
			</subsection>
			<subsection name="Administrasjon">	
				<p>For å lett kunne administrere logging oppsettet vil det være hensiktsmessing å benytte JMX. Det finnes støtte i Log4J til JMX men denne funksjonaliteten er ikke godt dokumentert og den tilbyr ikke å lagre endringer til fil. En egen JMX komponent vil bli utviklet som kan redigere Log4j sin konfigurasjonsfil.</p>
				<h4>Log4jMBean</h4>
				<p>Siden Log4j selv leser inn log konfigurasjonen på nytt, er det ikke noe behov for å kunne endre den innlastede konfigurasjonen. Log4jMBean vil derfor være et grensesnitt til å redigere selve konfigurasjonsfilen.</p>
			</subsection>
			<subsection name="Automatisk oppdatering">
				<p>Log4j støtter automatisk oppdatering av logging konfigurasjonen, men det er ingen måte å konfigurere at dette skal benyttes. For å støtte denne er man nødt til å lage en egen LogFactory 
				som commons-logging benytter for å initialisere Log4j. Det finnes allerede en Log4jLogFactory i commons-logging, 
				men denne er deprecated pga. den ikke gjør noen nytte. Denne kan gjenbrukes og modifiseres til å sette opp Log4j til å lytte på konfigurasjonfilen. 
				Log4jLoggerFactory må spesifiseres opp i commons-logging.properties.</p>
				<h4>Log4jLogFactory</h4>
				<p>
					Log4jLogFactory som følger med commons-logging kan gjenbrukes og modifiseres til å sette opp Log4j til å lytte på konfigurasjonsfilen. Dette gjøres ved å benytte
					<i>PropertyConfigurator</i>	og <i>DOMConfigurator</i>. Log4jLogFactory burde implementeres til å støtte bruk av begge disse selv om det er PropertyConfigurator som i praksis vil bli
					brukt siden konfigurasjonen vil spesifiseres i en properties fil (log4j.properties). I disse må initialisere Log4j med metoden <i>configureAndWatch</i> fremfor å benytter <i>configure</i>
					blir benyttet idag.
				</p>
			</subsection>
			<subsection name="Klasse diagram">

				<img src="../images/design/LoggingClass.gif" />
				<p>Dette diagrammet viser sammenhengen mellom commons-logging og Log4j i tillegg til hvilke klasser som må implementers.</p>
			</subsection>
			<subsection name = "Endringslogg">
<source><![CDATA[
$Log$
Revision 1.3  2004/06/17 09:16:15  tsb2920
Updated after review by Håvard Bjåstad
]]>			
</source>
			</subsection>

		</section>
	</body>
</document>


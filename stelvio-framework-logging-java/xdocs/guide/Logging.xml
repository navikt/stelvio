<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Logging - Guide</title>
	</properties>
	<body>
		<section name="Logging - Guide">
			
			<subsection name="Oversikt">
			
				<p>
					Logging av applikasjonshendelser og systemfeil utføres ved hjelp av funksjonalitet
					implementert i <i>Jakarta Commons Logging</i>, som i praksis delegerer loggingen til
					<i>Jakarta Log4j</i>. Meldingene logges til en lokal fil eller til en meldingskø. 
					I tillegg til standard funksjonalitet i <i>Jakarta Commons Logging</i> tilbys støtte 
					for:
				</p>
				<ul>
					<li>
						at <i>Jakarta Log4j</i> hvert 60 sekund sjekker om konfigurasjonsfilen er endret 
						og eventuelt oppdaterer konfigurasjonen.
					</li>
					<li>
						at <i>Jakarta Log4j</i> kan aksessere informasjon lagret i <a href="TransactionContext">
						transaksjonskonteksten</a>. Dette er implementert i <i>Transaction Context</i>.
					</li>
					<li>
						at <i>Jakarta Log4j</i> kan konfigureres vha <i>Java Management Extentions</i> (JMX),
						slik at driftsavdelingen ikke behøver å editere konfigurasjonsfilen direkte på filsystemet.
					</li>
				</ul>
				<p>
					Følgende alvorlighetsgrader støttes av <i>Jakarta Commons Logging</i> og <i>Jakarta Log4j</i>.
				</p>
				<table border="0" cellpadding="0" cellspacing="0">
					<tr>
						<th>Jakarta Commons Logging</th>
						<th>Jakarta Log4j</th>
						<th>Beskrivelse</th>
					</tr>
					<tr>
						<td> FATAL </td>
						<td> FATAL </td>
						<td> 
							Fatale hendelser som fører til at hele eller deler av systemet eller tjenesten
							feiler eller er utilgjengelig for flere brukere. Driftsavdelingen varsles.
						</td>
					</tr>
					<tr>
						<td> ERROR </td>
						<td> ERROR </td>
						<td>
							Alvorlige hendelser som fører til at hele eller deler av systemet eller tjenesten
							feiler eller er utilgjengelig for gjeldende bruker. Driftsavdelingen varsles ikke.  
						</td>
					</tr>
					<tr>
						<td> WARN </td>
						<td> WARN </td>
						<td> 
							Advarsel om at en hendelse har oppstått som potensielt kan medføre 
							fremtidige feil eller avvik for en eller flere brukere.
						</td>
					</tr>
					<tr>
						<td> INFO </td>
						<td> INFO </td>
						<td> 
							Informasjon om viktige hendelser, f.eks. at et system, en tjeneste eller 
							komponent startes eller stoppes.
						</td>
					</tr>
					<tr>
						<td> DEBUG </td>
						<td> DEBUG </td>
						<td> Detaljert informasjon om flyten i sytemet </td>
					</tr>
					<tr>
						<td> TRACE </td>
						<td> DEBUG </td>
						<td> Enda mer detaljert informasjon om flyten i sytemet </td>
					</tr>
				</table>
				<p>
					Alvorlighetsgradene øker fra venstre mot høyre som vist nedenfor. 
					Ved å konfigurere hvilke alvorlighetsgrader som logges, kan driftsavdelingen 
					filterere bort detaljerte meldinger. F.eks. kan man velge alvorlighetsgrad 
					<b>ERROR</b> for å bare logge meldinger av typen <b>ERROR</b> og 
					<b>FATAL</b>.
				</p>
				<source>TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</source>
				
			</subsection>			
			
			<subsection name="Logging i applikasjonen">
				<h4>Generelle retningslinjer</h4>
				<ul>
					<li>
						Applikasjonskomponenter skal kun benytte alvorlighetsgradene <b>DEBUG</b> eller <b>TRACE</b>
						for å ikke påvirke ytelsen negativt pga. logging, samt unngå at for mye informasjon skrives 
						til loggene i en normal driftssituasjon. <br/>
					</li>
					<li>
						Applikasjonskomponenter skal <b>ALLTID</b> sjekke om alvorlighetsgraden skal logges før selve 
						loggingen utføres. Dette medfører en ubetydelig forsinkelse når alvorlighetsgraden skal 
						logges, men en vesentlig forbedring av ytelsen når alvorlighetsgraden ikke skal logges. <br/>
					</li>
					<li>
						Debugging av applikasjonskomponenter skal i utgangspunktet ikke implementeres ved hjelp av 
						logging, men ved å benytte seg av debug-støtten i utviklingsverktlyet. Dersom dette allikevel 
						er nødvendig bør følgende overholdes:<br/>
						<ul>
							<li> begrens logging inne i while- og for-løkker </li>
							<li> unngå unødvendig konkatinering av parametre </li>
							<li> bruk <b>TRACE</b> til logging av detaljer i komponenten  </li>
							<li> bruk <b>DEBUG</b> til logging av overordnet flyt i komponenten </li>
							<li> ta bort loggingen når problemet er løst og ikke forventes å gjenoppstå.<br/></li>
						</ul>
					</li>
					<li>
						Logging av feil skal kun gjøres av arkitekturkomponenter. <br/>
					</li>
					<li>
						Logging av ytelse skal kun gjøres av arkitekturkomponenter. <br/>
					</li>
				</ul>
				<h4>Hvordan implementere logging</h4>
				<h5>Logging i en <i>Action</i>, <i>BusinessService</i> eller <i>IntegrationService</i>  </h5>
				<p>
					Superklassene er ansvarlige for å instansiere loggeren og tilgjengeliggjøre den som en 
					protected variabel med navn <i>log</i>. Eksempel:
				</p>
<source><![CDATA[
...
if( log.isDebugEnabled() ) {
   log.debug( "First Step..." );
}
...
for( int i=0; i < parameters.length; i++ ){
   
   if( log.isTraceEnabled() ) {
      log.trace("Examining parameter " + parameters[i] );
   }
   ...
} 
...
if( log.isDebugEnabled() ) {
   log.debug( "Last Step..." );
}
...
]]></source>
				<h5>Logging i andre klasser </h5>
				<p>
					Selve loggingen vil implementeres som vist over. I tillegg må loggeren
					implisitt instantieres før loggingen kan utføres. Eksempel:
				</p>
<source><![CDATA[
...
// Protected log for reuse in potential sub classes
protected final Log log = LogFactory.getLog(this.getClass());
...
]]></source>
			</subsection>
			<subsection name="Logging i arkitekturen">
				<h4>Generelle retningslinjer</h4>
				<p>
					De samme retningslinjene gjelder for arkitekturen som for applikasjonen, 
					bortsett fra at arkitekturkomponenter også tillates å benytte <b>INFO</b>. 
					Logging av <b>INFO</b> meldinger skal kun benyttes for å informere om at:
				</p>
				<ul>
					<li> Komponenten startes eller har startet </li>
					<li> Komponenten stoppes eller har stoppet </li>
					<li> Komponenten rekonfigureres eller har blitt rekonfigurert </li>
					<li> Komponenten aktiveres eller deaktiveres </li>
				</ul>
			</subsection>
			<subsection name="Logging av feil og avvik">
				<h4>Generelle retningslinjer</h4>
				<p>
					Ansvaret for logging av feil og avvik ligger hos feilhåndteringskomponenten.
					Arkitekturkomponenter og applikasjonskomponenter skal derfor ikke implementere
					dette selv men la feilhåndteringskomponenten håndtere loggingen. Se
					<a href="ErrorHandling.html">feilhåndtering</a>
				</p>
			</subsection>
			
			<subsection name="Konfigurasjon">
				<h4>Kunfigurasjon av commons-logging</h4>
				<p>
				Det finnes flere måter å konfigurere hvilken LogFactory som commons-logging skal benytte,
				men her vil det benyttes en property fil. Dersom commons-logging finner en commons-logging.properties
				fil vil den benytte den LogFactory som står konfigurert i denne. Her kan man også sette egenskaper
				for en LogFactory. commons-logging.properties ser slik ut:
				<source>
# the LogFactory implementation to use
                    org.apache.commons.logging.LogFactory=no.stelvio.common.framework.log.factory.Log4jLogFactory

                    # the interval between each refresh of the logging configuration. Default is 60 seconds.
                    no.stelvio.common.framework.log.factory.Log4jLogFactory.refreshInterval=60000
                </source>
				</p>
				<h4>Konfigurering av Log4j</h4>
				<p>Eksemplene nedenfor viser hvordan Log4j kan konfigureres vha log4j.properties</p>
				<h5>Log4j Appenders</h5>
				<p>
					En <i>appender</i> er et objekt som skriver meldingene som logges til konsollet,
					en fil, en databasetabell eller meldingskø. Konfigurering av hvor og hvordan loggingen 
					skal gjøres ved å konfigurere <i>appenderene</i>. Eksempelet nedenfor viser 3 forskjellige 
					appendere, en som skriver til java-konsollet, en som skriver til filen debug.log og en til 
					filen system.log. 
				</p>
<source><![CDATA[
...
### The Console Appender (Only for development)
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Threshold=DEBUG
log4j.appender.Console.Target=System.out
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=[%d, %-5p, %F:%L] - [%X{user},%X{screen},%X{process},%X{transaction}] - %m%n

### The Debug Log File Appender
log4j.appender.Debuglog=org.apache.log4j.DailyRollingFileAppender
log4j.appender.Debuglog.File=debug.log
log4j.appender.Debuglog.DatePattern='.'yyyy-MM-dd
log4j.appender.Debuglog.Append=true
log4j.appender.Debuglog.layout=org.apache.log4j.PatternLayout
log4j.appender.Debuglog.layout.ConversionPattern=[%d, %-5p, %c:%L] - [%X{user},%X{screen},%X{process},%X{transaction}] - %m%n

### The System Log File Appender
log4j.appender.Systemlog=org.apache.log4j.DailyRollingFileAppender
log4j.appender.Systemlog.File=system.log
log4j.appender.Systemlog.DatePattern='.'yyyy-MM-dd
log4j.appender.Systemlog.Append=true
log4j.appender.Systemlog.layout=org.apache.log4j.PatternLayout
log4j.appender.Systemlog.layout.ConversionPattern=[%d, %-5p, %c:%L] - [%X{user},%X{screen},%X{process},%X{transaction}] - %m%n

### The Error Log JMS Appender
log4j.appender.JMS=no.stelvio.common.framework.log.appenders.JMSQueueAppender
log4j.appender.JMS.layout=org.apache.log4j.PatternLayout
log4j.appender.JMS.layout.ConversionPattern=[%d, %-5p, %c:%L] - %m%n
log4j.appender.JMS.initialContextFactoryName=com.ibm.websphere.naming.WsnInitialContextFactory
log4j.appender.JMS.providerURL=iiop://localhost:2809
log4j.appender.JMS.queueConnectionFactoryBindingName=jms/qcf/jmsQCF
log4j.appender.JMS.queueBindingName=jms/queue/LogQueue
log4j.appender.JMS.URLPkgPrefixes=com.ibm.ws.runtime:com.ibm.ws.naming
#log4j.appender.JMS.securityPrincipalName=
#log4j.appender.JMS.securityCredentials=
#log4j.appender.JMS.userName=
#log4j.appender.JMS.password=
]]></source>				
				<h5>Log4j Loggers</h5>
				<p>
					En <i>logger</i> er et objekt som konsumerer meldinger fra rammeverket eller applikasjonen.
					Log4j støtter hierarkiske loggere, dvs arv av konfigurasjon. Dette gir en ekstrem fleksibilitet
					ved at spesifikke loggere arver fra de mer generiske loggere. For eksempel vil man kunne 
					konfigurere logging fra alle arkitektur- og applikasjonskomponentene ved å konfigurere en logger
					som tilsvarer minste felles multiplum av java pakkenavnet til komponentene (no.stelvio).
                </p>
<source><![CDATA[				
...
### External loggers
log4j.logger.de.laures.cewolf=WARN, Console, Systemlog
log4j.logger.com.jcoverage=WARN, Console, Systemlog
log4j.logger.org.apache=WARN, Console, Systemlog
log4j.logger.org.jfree.data=WARN, Console, Systemlog
log4j.logger.sno.stelviounit.struts=WARN, Console, Systemlog

### Framework loggers
lno.stelvioogger.no.nav.common.framework=INFO, Console, Systemlog, JMno.stelvioj.logger.no.nav.web.framework=INFO, Console, Systemlog, JMS
logno.stelvioger.no.nav.business.framework=INFO, Console, Systemlog, JMS
log4j.logger.no.nav.integrationno.stelviowork=INFO, Console, Systemlog, JMS

### Applicno.stelviologgers
log4j.logger.no.nav.common=DEBUG, Cno.stelvio, Debuglog
log4j.logger.no.nav.web=DEBUG, Consolno.stelviouglog
log4j.logger.no.nav.business=DEBUG, Console, Debuglog
log4j.logger.no.nav.integration=DEBUG, Console, Debuglog
...
]]></source>
				<p>
					For mer informasjon om <i>Jakarta Commons Logging</i> og <i>Jakarta Log4j</i>, gå til hhv
					<a href="http://jakarta.apache.org/commons/logging/">http://jakarta.apache.org/commons/logging/</a> 
					og <a href="http://jakarta.apache.org/log4j/">http://jakarta.apache.org/log4j/</a>.
				</p>
			</subsection>
			<subsection name = "Endringslogg">
<source><![CDATA[
$Log$
Revision 1.4  2004/06/17 09:16:59  tsb2920
Updated after review by Håvard Bjåstad
]]>			
</source>
			</subsection>

			
		</section>
	</body>
</document>


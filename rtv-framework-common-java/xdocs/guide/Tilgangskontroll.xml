<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Tilgangskontroll - Guide</title>
	</properties>
	<body>
		<section name="Tilgangskontroll - Guide">
			
			<subsection name="Oversikt">
			
				<p>
					<i>Tilgangskontrollen</i> til vinduer og EJB'er styres ved konfigurasjon av web.xml og deployment-descriptors. 
					Dette kan gjøres direkte i konfigurasjonsfilene eller ved hjelp av WSAD.
				</p>
			
			</subsection>
			
			<subsection name="Web-laget">
			
				<h4>Tilgangskontroll av vinduer</h4>
				<p>
					Konfigurasjon av tilgang til vinduer er typisk en jobb som kan gjøres rett før applikasjonen deployes. 
					Hver enkelt utvikler trenger derfor ikke å ta hensyn til tilgangskontrollen under utvikling av et vindu (sålenge 
					den er deklarativ), dette er en jobb som kan utføres av en person før deployment. Det som 
					imidlertid må være klart før denne jobben kan gjøres, er hvilke roller som skal ha tilgang til hvilke vinduer.
					
				</p>
				
				<h4>Hvordan lage roller</h4>
				Lag rollene som du har definert ved å følge disse stegene i WSAD:
				
				<li>1.	Aktiviser J2EE perspektivet og sjekk at "J2EE hierarchy" flippen er valgt.</li>
				
				<li>2.	Finn og dobbelklikk på web-applikasjonen i Web Modules grenen slik at "Web Deployment Descriptor" panelet åpnes.</li>
				
				<li>3.	Velg Security flippen i "Web Deployment Descriptor" panelet.</li>
				
				<li>4.	Det er to flipper på Security-flippen. Velg flippen som heter "Security Roles".</li>
				
				<li>5.	Klikk Add-knappen under "Security Roles" list-boxen.</li>
				
				<li>6.	Klikk på den nye sikkerhetsrollen og skriv inn navnet på en av dine roller, for eksempel saksbehandler.</li>
				
				<li>7.	Skriv inn en beskrivelse av rollen i Details vinduet. For eksempel Brukere som har saksbehandlerrolle i Bidrag.</li>
				
				<li>8.	Gjenta stegene over for hver av rollene som skal inn, og trykk CTRL+S for å lagre endringene når du er ferdig. Panelet 
				burde se ut som følgende når du er ferdig (med eventuelle andre roller):</li>
				<p>
				<img src="../images/guide/roles.gif" />

				</p>	
				
				<p>				
				Rollene som kan sees i vinduet over, vil generere følgende linjer i web.xml:
				</p>	
<source><![CDATA[							
	<security-role>
		<description>Brukere av bidragsapplikasjonen som skal ha tilgang som saksbehandler vil være knyttet 
		mot denne rollen.</description>
		<role-name>saksbehandler</role-name>
	</security-role>
	<security-role>
		<description>Brukere av bidragsapplikasjonen som skal ha tilgang som brukerhjelpa vil være knyttet 
		mot denne rollen.</description>
		<role-name>brukerhjelpa</role-name>
	</security-role>
]]></source>	
				
				<h4>Hvordan lage “Security Constraints”</h4>
				<p>
				En "security constraint" avgjør hvem som er autorisert til å aksessere en "Web resource collection", som er en liste av 
				URL patterns (f.eks. /Welcome.do) og HTTP metoder (f.eks. GET, POST), som beskriver et sett med ressurser som 
				skal beskyttes.
				
				Vi vil beskytte alle Actions (HTTP Metoder) GET, PUT, HEAD, TRACE, POST, DELETE and OPTIONS. Viktig! Husk at 
				metoder som ikke beskyttes vil være tilgjengelige for alle, inkludert brukere som ikke er autentisert. En liste 
				bør lages som inneholder unike rolle/objekt kombinasjoner som har rettigheter til å kalle disse HTTP metodene. 
				Følgende tabell er et eksempel på en slik liste:
				</p>	
				
				<h5>	Security Constraints: </h5>
				<table>
					<tr>
						<th>Security Constraint</th>
						<th>Roller</th>
						<th>URL's (objekt)</th>
					</tr>
					<tr>
						<td>PreSokePerson</td>
						<td>saksbehandler</td>
						<td>/PreSokePersonAction.do</td>
					</tr>
					<tr>
						<td>Oppgaveliste</td>
						<td>saksbehandler</td>
						<td>/oppgaveliste.do</td>
					</tr>
					<tr>
						<td></td>
						<td>brukerhjelpa</td>
						<td></td>
					</tr>													
				</table>
				
				<p>				
				Listen av rolle/objekt kombinasjonene er dine “security constraints”, og alle disse “security constraints” bør tillate alle http-metodene.  
				Følg disse stegene for å lage de ”security constraints” som du har identifisert:
				</p>
								
				<li>1.	Aktiviser J2EE perspektivet og sjekk at "J2EE hierarchy" flippen er valgt.</li>
				
				<li>2.	Finn og dobbelklikk på web-applikasjonen i Web Modules grenen slik at "Web Deployment Descriptor" panelet åpnes.</li>
				
				<li>3.	Velg Security flippen i "Web Deployment Descriptor" panelet.</li>
				
				<li>4.	Det er to flipper på Security-flippen. Velg flippen som heter "Security Constraints"</li>
				
				<li>5.	Klikk Add-knappen under "Security Constraints" list-boxen.</li>
				
				<li>6.	Sett navnet på constraint, for eksempel Oppgaveliste.</li>
				
				<li>7.	Du trenger nå å definere hvilke ressurser og aksjoner som constraint skal dekke. Dette gjøres 
				ved å lage en såkalt "Web Resource Collection", som ganske enkelt er en kombinasjon av aksjoner 
				(http-metoder) og URL-patterns (for eksempel /oppgaveliste.do). Husk at WSAD alltid lager en tom 
				resource collection når du legger til en security constraint, så i de fleste tilfellene kan denne 
				collection editeres. Det følgende eksemplet tillater GET, PUT, HEAD, TRACE, POST, DELETE and OPTIONS 
				adgang til alle ressurser som har URL /PreSokePersonAction.do:</li>
				<li>a.	Name: PreSokePerson</li>
				<li>b.	HTTP Methods (actions): GET, PUT, HEAD, TRACE, POST, DELETE and OPTIONS</li>
				<li>c.	 URL Patterns: /PreSokePersonAction.do</li>
				
				<p>
				<img src="../images/guide/URLpatterns.gif" />
				</p>	
				
				<li>8.	Deretter må vi legge til de rollen(e) som er autorisert til å aksessere webressursen. Klikk Edit 
				knappen ved siden av  Authorized Roles listeboxen, og velg rollene for denne constraint’en: </li>
				
				<p>
				<img src="../images/guide/rolelist.gif" />
				</p>
						
				<li>9.	Gjenta stegene over for hver security constraint, og trykk CTRL+S fpr å lagre endringene når du er ferdig. 
				Under følger et eksempel på hvordan skjermbildet I WSAD kan se ut etter at stegene over er utført:</li>
				
				<p>
				<img src="../images/guide/webresource.gif" />
				</p>	
				
				<p>
				PreSokePerson constraint’en som du kan se valgt i vinduet over vil generere følgende linjer i web.xml:
				</p>
<source><![CDATA[					
	<security-constraint>
		<display-name>PreSokePerson</display-name>
		<web-resource-collection>
			<web-resource-name>PreSokePerson</web-resource-name>
			<description></description>
			<url-pattern>/PreSokePersonAction.do</url-pattern>
			<http-method>
			GET</http-method>
			<http-method>
			PUT</http-method>
			<http-method>
			HEAD</http-method>
			<http-method>
			TRACE</http-method>
			<http-method>
			POST</http-method>
			<http-method>
			DELETE</http-method>
			<http-method>
			OPTIONS</http-method>
		</web-resource-collection>
		<auth-constraint>
			<description>PreSokePerson</description>
			<role-name>saksbehandler</role-name>
		</auth-constraint>
	</security-constraint>
]]></source>							
			
			</subsection>
			
			<subsection name="EJB-lag">			
			
			<h4>Autentisering</h4>
			<p>
			En EJB er ikke ansvarlig for autentisering av en bruker. Brukeren må autentiseres av en annen 
			komponent som for eksempel en Web-komponent, før et kall kan gjøres til en beskyttet EJB. 
			
			Dette betyr at EJB-kall default vil kjøre i sikkerhetskonteksten til kallende bruker som har blitt 
			autentisert av web-applikasjonen.
			</p>
 
			<h4>Autorisering</h4>
			<p>
			Følgende kapittel forklarer hvordan man kan konfigurere tilgang til EJB-ressurser etter at brukeren 
			har blitt autentisert.
			</p>
			<h4>Legge til roller</h4>
			<p>
			Lag rollene du har definert ved å følge disse stegene i WSAD:

			<li>1.	Aktiviser J2EE perspektivet og sjekk at "J2EE hierarchy" flippen er valgt.</li>

			<li>2.	Dobbelklikk på EJB modulen i EJB Modules grenen, som åpner  EJB Deployment Descriptor panelet</li>
			
			<li>3.	Velg Assembly Descriptor flippen i EJB Deployment Descriptor panelet</li>
			
			<li>4.	Finn Security Roles seksjonen, og klikk  Add… knappen under listeboksen.</li>
			
			<li>5.	Skriv følgende informasjon om rollen:</li>
			<li>a.	Name: Navnet på rollen. For eksempel: saksbehandler.</li>
			<li>b.	Description: En beskrivelse av rollen. For eksempel: Brukere som er saksbehandlere i bidrag</li>
			
			<li>6.	Gjenta stegene over for hver av rollene som skal inn, og trykk CTRL+S for å lagre endringene når du er ferdig. 
			Panelet burde se ut som følgende når du er ferdig (med eventuelle andre roller):</li>

				<p>
				<img src="../images/guide/rolesEJB.gif" />
				</p>

			Rollen du kan se I bildet over  vil generere følgende linjer i ejb-jar.xml:
			</p>
<source><![CDATA[	
		<security-role>
			<description>Brukere som er saksbehandlere i bidrag</description>
			<role-name>saksbehandler</role-name>
		</security-role>
]]></source>		
			<h4>Legge til metodeaksess</h4>
			<p>
			Det å legge til metodeaksess betyr å gi bare visse roller tilgang til å utføre metodekall i home og remote 
			interfacet til en EJB. Hvis en metode ikke er dekket av en adgangsbegrensning, så har alle, inkludert 
			ikke-autentiserte brukere, tilgang til å kalle metoden.  

			Følg disse stegene for å lage adgangsbegrensningene som du har identifisert:

			<li>1.	Aktiviser J2EE perspektivet og sjekk at J2EE hierarchy flippen er valgt.</li>
			
			<li>2.	Dobbelklikk på EJB modulen i EJB Modules grenen, som åpner  EJB Deployment Descriptor panelet</li>
			
			<li>3.	Velg Assembly Descriptor flippen i EJB Deployment Descriptor panelet</li>
			
			<li>4.	Finn  Method Permissions seksjonen, og klikk  Add… knappen under listeboksen</li>
			
			<li>5.	Sjekk at Security Roles er valgt, check alle rollene du vil tillate aksess, og klikk  Next knappen</li>
			
			<li>6.	Velg EJB’ene som er dekket av denne adgangsbegrensningen og klikk klikk  Next knappen</li>
			
			<li>7.	Nå må du  spesifisrere hvilke metoder som rollene skal ha tilgang til. Dette kan gjøres på følgende 
			måter:</li>
			
			<li>a.	Tillat adgang til alle metoder på både home og remote interfacet: Kryss av ved siden av selve EJB’en. 
			Merk at ettersom * lagres i deskriptoren og ingen metodenavn lagres, så vil samme aksessregler også gjelde for 
			metoder som blir lagt til i EJB’en senere.</li>
			
			<li>b.	Tillat adgang til alle metoder i enten home eller remote interfacet: Klikk + tegnet ved siden av bønne 
			navnet, og kryss av ved siden av * noden til home eller remote interfacet. Merk at ettersom * lagres i 
			deskriptoren og ingen metodenavn lagres, så vil samme aksessregler også gjelde for metoder som blir lagt til i 
			EJB’en senere.</li>
			
			<li>c.	Tillat adgang til individuelle metoder: Klikk + tegnet ved siden av bønne navnet og kryss av ved siden 
			av hvert metodenavn. Du kan selvfølgelig kombinere dette med b over, og for eksempel tillate adgang til alle 
			home interfacemetoder, mens bare adgang til individuelle remote interfacemetoder gis.</li>
			
			<li>8.	Gjenta stegene over for hver ”Method Permission”, og trykk CTRL+S fpr å lagre endringene når du er 
			ferdig. Under følger et eksempel på hvordan skjermbildet I WSAD kan se ut etter at stegene over er utført:</li>

				<p>
				<img src="../images/guide/metodeaksess.gif" />
				</p>
 
			“Method permission” som kan sees i vinduet over vil generere følgende linjer i ejb-jar.xml:
			</p>
<source><![CDATA[			
		<method-permission>
			<role-name>saksbehandler</role-name>
			<method>
				<ejb-name>BatchFacade</ejb-name>
				<method-name>*</method-name>
			</method>
		</method-permission>
]]></source>

		</subsection>
			
			<subsection name = "Endringslogg">
<source><![CDATA[
$Log$
Revision 1.1  2004/07/09 12:27:39  shc2920
LAgt inn i cvs
]]>			
</source>
			</subsection>
			
		</section>
	</body>
</document>


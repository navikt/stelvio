<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Autentisering</title>
	</properties>
	<body>
		<section name="Tilgangskontroll">
			<p>
			
			Etter at bruker er autentisert, benyttes brukerid til autentisert bruker i autorisasjonssjekk, 
			før tilgang gis til funksjoner og skjermbilder. Det er to måter man kan regulere tilgang til 
			funksjoner og skjermbilder. Det kan gjøres:
			</p>
			<ol>				
			<li>Deklarativt - det vil si at tilgang konfigureres i deployment descriptorer.</li>
			<li>Programmatisk - tilgangssjekk uføres i applikasjonskoden.</li>
			</ol>
			<subsection name="Deklarativ tilgang">
				<h4>Definisjon av Roller</h4>
					<p>				
					Før man kan beskytte noe, så må det bestemmes hva slags brukere som skal benytte 
					applikasjonen og for hver brukertype må en rolle defineres. Roller som følger 
					forretningsreglene til applikasjonen og ikke rent tekniske (les/skriv) roller bør lages.
					For eksempel rollenavn som saksbehandler og ansatt bør foretrekkes fremfor superbruker 
					og lesbruker.
					</p>

				<h4>Presentasjonslag</h4>
					<p>				
					<b>Objekter</b>
					</p>
					<p>
					Neste steg vil være å identifisere hvilke ressurser som trenger beskyttelse. En ressurs kan være 
					en servlet (URL).
					</p>
					<p>					
					<b>Actions</b>
					</p>
					<p>					
					Til slutt må man avgjøre hvilke aksjoner som skal tilgjengeliggjøres på ressursen. For en 
					servlet (URL) betyr dette å bestemme hvilke http-metoder som skal tilgjengeliggjøres.
					</p>					
				<h4>Forretningslag</h4>				
					<p>
					<b>Objekter</b>
					</p>
					<p>
					Det må identifiseres hvilke ressurser som skal beskyttes. En ressurs vil her være en EJB.
					</p>
					<p>
					<b>Actions</b>
					</p>
					<p>
					Til slutt må man avgjøre hvilke aksjoner som skal tilgjengeliggjøres på ressursen. Dette betyr 
					å definere hva hver rolle har tilgang til på hvert objekt. For en EJB f.eks. betyr dette å avgjøre 
					hvem som skal ha tilgang til å eksekvere metodene i EJB'en.
					</p>
			</subsection>
			<subsection name="Programmatisk tilgang">
				<h4>Presentasjonslag</h4>
				<p>
				Tommelfingerregelen er: Hvis sikkerhetskravene kan oppnås gjennom konfigurasjon bør dette gjøres. 
				Når det er sagt, så finnes det noen metoder tilgjengelig gjennom interfacet HttpServletRequest 
				som kan brukes når deklarativ sikkerhet ikke er tilstrekkelig:
				</p>
				<p>					
				<b>getRemoteUser()</b>
				Dette er sannsynligvis den mest nyttige metoden, fordi den returnerer uid på den autentiserte 
				brukeren som en String.
				</p>
				<p>				
				<b>getUserPrincipal()</b>
				Denne metoden er lik getRemoteUser(), bortsett fra at den returnerer et 
				java.security.Principal objekt som inneholder uid på den autentiserte brukeren.
				</p>
				<p>
				<b>isUserInRole()</b>
				Denne metoden kan brukes til å utføre programmatisk autorisasjon av en bruker, og kan for 
				eksempel bli brukt når du trenger å vise forskjellig innhold basert på rollen til gjeldene 
				bruker. Men, hvis kravet er å gi noen tilgang til å uføre et spesifikt forretningskall så 
				burde kallet legges i en EJB og så beskyttes deklarativt.				
				</p>
				<h4>Forretningslag</h4>
				<p>
				Det finnes få grunner til å benytte programmatisk sikkerhet i EJB'er, fordi de fleste krav kan
				tilfredsstilles gjennom en kombinasjon av metodetilgang og delegering (Run-As). Men skulle 
				behovet være der, er de følgende metodene tilgjengelige i EJBContext interfacet:
				<p>
				</p>
				<b>getCallerPrincipal()</b>
				Denne metoden returnerer et java.security.Principal objekt som inneholder brukernavnet til 
				brukeren som kaller EJB'en. Hvis den kallende EJB'en har blitt definert med en "Run-As rule",
				så vil brukeren som ble valgt som "Run-As bruker" under deployment bli returnert.
				</p>
				<p>				
				<b>isCallerInRole()</b>
				Denne metoden kan bli brukt til å utføre programmatisk autorisasjon av brukere. Denne metoden 
				bør unngås, metodetilgang bør konfigureres istedet.
				</p>
			</subsection>				
			<subsection name="Funksjonell tilgang i Bidragsapplikasjonen.">
			<p>
				Bidragapplikasjonen vil benytte deklarativ sikkerhet på weblaget for å styre tilgang til 
				vinduer. Dette gjøres ved å gi URL-tilgang til utvalgte roller. Det vil ikke skilles mellom 
				aksjoner, det vil si tilgang til http-metoder. Enten gis rollen full tilgang eller så får 
				rollen ingen tilgang. 

				Programmatisk sikkerhet på weblaget vil bli brukt for å hente ut autentisert UiD fra sesjonen 
				ved kallet getRemoteUser(). Hvis man trenger å vise forskjellig innhold basert på rollen til 
				gjeldene bruker, så kan i tillegg isUserInRole(rolle) kallet benyttes. 

				På EJB-laget beskyttes de EJB'er som man ønsker å sikre, med deklarativ sikkerhet. Enten kan 
				hele EJB'en beskyttes eller så kan individuelle metoder i EJB'en beskyttes.

				Et vindu som sier at bruker ikke har tilgang vil vises hvis bruker prøver å åpne et vindu (URL) 
				som den aktive (autentiserte) bruker ikke har tilgang til.
			</p>
			</subsection>
			<subsection name="Roller">			
				Tabell 1 innholder de funksjonelle rollene som skal benyttes i løsningen:
			</subsection>
			<p>
				<img src="../images/design/roller.gif" />

			</p>
			<p>
 
			Tabell 1: Rolleoversikt - Bidrag fase 2
			</p>
			<p>
			Disse rollene gis til de forskjellige vinduene og metodene i applikasjonen og mappes opp mot grupper i 
			en LDAP/ACF2, som igjen innholder brukerne som vil få tilgang. (For å kunne skille mellom roller i 
			applikasjonen og roller i LDAP, omtales roller i LDAP som grupper, det vil typisk være en gruppe i LDAP 
			for hver rolle i applikasjonen). 
			</p>
			<p>			
			I og med at gruppene og brukerne ligger i ACF2 vil disse gruppene og hvem som er medlemmer av gruppene, 
			vedlikeholdes gjennom ATK. En bruker vil kunne ha en eller flere av rollene i tabellen, men de aller 
			fleste brukere vil kun ha én rolle knyttet til sin bruker. Det kan legges til og fjernes roller avhengig 
			av kravene fra applikasjonen (applikasjonen må "redeployes" etter at roller legges til/fjernes).
			</p>
			<p>			
			Tilgang til applikasjonen kan derfor reguleres ved at en bruker meldes inn eller ut av en gruppe 
			som ligger i LDAP (vha ATK). Dette kan gjøres mens applikasjonen er oppe og går. Rollene som disse 
			gruppene mappes mot er deployet i applikasjonen og kan ikke endres uten at applikasjonen må redeployes, 
			det er altså ikke meningen, ifølge J2EE sikkerhet/JAAS, at disse rollene skal endres ofte (og absolutt 
			ikke mens applikasjonen er oppe og går).
			</p>	
				
			<td>Se dette dokumentet for ytterligere informasjon: <a href="\\S2900002\Prosjektarkiv\Moderniseringsarbeidet\Ma_arkiv\SAF_Speil\SAF610009.004 Detaljert design av sikkerhetsarkitektur for Bidrag 2-prosjektet.doc">Design i Word-format.</a></td>
				
			<subsection name = "Endringslogg">
<source><![CDATA[
$Log$
Revision 1.3  2004/06/16 13:53:01  psa2920
la til endringslogg
]]>			
</source>
			</subsection>

		</section>
	</body>
</document>


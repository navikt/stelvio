<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Overvåking</title>
	</properties>
	<body>
		<section name="Overvåking">
			<subsection name="Oversikt">
				<p>
				Hver service, servlet og EJB skal ha muligheten til å bli overvåket. Samtidig ønsker man 
				at overvåkning ikke skal være noe en applikasjonsprogrammerer trenger å ta hensyn til.
				Overvåking skal være dynamisk og konfigurerbart og overvåkningen skal ha muligheten til
				å foreta handlinger dersom det som blir overvåket overskrider visse definerte grenser.
				</p>
				<h4>Konfigurasjon</h4>
				<p>
				Hver arkitektur komponent som er skrevet for å støtte overvåking vil kunne ha en <i>MonitorChain</i>.
				En MonitorChain vil kalles før (preExecute) og etter (postExecute) eksekveringen av selve 
				arkitektur komponenten. <i>MonitorChain</i> vil da kalle <i>preMonitor</i> og <i>postMonitor</i> på
				alle <i>Monitor</i> imlementasjoner og <i>preManage</i> og <i>postManage</i> på alle <i>Manager</i> implementasjoner 
				den er konfigurert opp med. En arkitektur komponent	skal kunne konfigureres til å ikke ha en MonitorChain og en MonitorChain skal
				konfigureres til å ha én eller flere Monitors.
				</p>
				<h4>Rapportering</h4>
				<p>
				En Monitor implemenetasjon er selv ansvarlig for å rapportere resultatet av overvåkingen.
				Det er tenkt at hver Monitor implementasjon også skal ha en JMX MBean implementasjon som
				den rapporterer til. En ekstern JMX klient kan da benytte disse MBean instansene til å
				observere de rapporterte verdiene.<br/>
				Selv om det er ønskelig at hver Monitor skal rapportere til en MBean, kan man også lage
				en Monitor som f.eks. rapporterer til en logg eller mer enn én mottaker.<br/>
				Enhver monitor rapporterer til en <i>ReportReceicer</i>. Det er implementasjonen av denne som
				bestemmer hvordan resultatene rapporteres.
				<br/>
				Alle Monitor-implementasjoner skal implementeres slik at de også rapporterer tiden de selv
				bruker.
				</p>
				<h4>Administrasjon</h4>
				<p>
				Dersom en Monitor også skal benyttes til manuell administrasjon er dette et design/implementasjons
				valg for hver enkel Monitor implementasjon. Dersom en Monitor skal kunne administreres manuelt
				oppfordres det til at dette kan gjøres vha. en JMX MBean. Administrasjon må kunne skrus av for
				hver enkelt komponent uten at man skrur av overvåkingen.
				</p>
				<p>
				Dersom det er behov for automatisk administrasjon kan en Monitor implementere et <i>Manager</i>
				interface. Hvis en Monitor også er en Manager, så vil den kunne ta affære dersom noe i overvåkingen
				tilsier dette. For eksempel vil ErrorMonitor kaste en exception dersom monitoreringen har time'et ut
				9/10 ganger. Denne vil da kunne kaste denne exception direkte uten at klienten trenger å vente 
				på en timeout.<br/>
				Kall rekkefølgen vil være slik:<br/>

				preManage()<br/>
				preMonitor()<br/>
				arkitektur komponent kall<br/>
				postMonitor()<br/>
				postManage()<br/>

				</p>
			</subsection>
			<subsection name="MonitorChain, Monitor og Manager">
				<h4>MonitorChain</h4>
				<p>
				En MonitorChain vil inneholde én eller flere Monitor instanser.
				En MonitorChain uten noen Monitor instanser har ingen hensikt og vil derfor ikke være mulig.
				</p>
				<h4>Manager</h4>
				<p>
				Manager er et valgfritt interface som en Monitor kan implementere dersom det er ønsket å
				ha automatisk administrasjon basert på verdiene som blir overvåket. En Manager må også være 
				en monitor, men en monitor trenger ikke være en manager. 
				</p>
				<h4>ErrorMonitor og ErrorMonitorReportRecevier</h4>
				<p>
				ErrorMonitor overvåker antall kall som er vellykket og feiler. ErrorMonitor rapporteref denne 
				statistikken til ErrorMonitorReportReceiver.<br/>
				ErrorMonitor er også en Manager. Denne skal kunne konfigureres opp til å "skru av" komponenten
				dersom et visst antall kall til komponenten feiler. Denne kaster da en ServiceFailedException direkte
				og sørger for at komponenten aldri blir kalt.
				</p>
				<h4>PerformanceMonitor og PerformanceMonitorReportReceiver</h4>
				<p>
				PerformanceMonitor vil overvåke tiden en en tjeneste bruker. Resultatet blir rapportert til 
				PerformanceMonitorReportRecevier som vil holde statistikk over kall-tider.
				</p>
			</subsection>
			<subsection name="Klassediagram">
				<img src="../images/design/MonitoringClass.gif" />
			</subsection>
			<subsection name="Sekvens diagram">
				<p>
				Følgende diagram viser et eksempel hvor en service kaller en annen service og hvordan MonitorChain og Monitor passer inn.
				</p>
				<img src="../images/design/MonitorSequence.gif" />
			</subsection>
			<subsection name = "Endringslogg">
<source><![CDATA[
$Log$
Revision 1.14  2004/06/18 11:13:33  tsb2920
Updated afetr comments from Håvard Bjåstad

Revision 1.13  2004/06/18 08:24:49  tsb2920
Updated after changing the class and interface names for the MBean. This was done due to restrictions in the JMX specifiaction

Revision 1.12  2004/06/17 06:59:41  tsb2920
Fixed typing error

Revision 1.11  2004/06/16 13:53:01  psa2920
la til endringslogg
]]>			
</source>
			</subsection>

		</section>
	</body>
</document>


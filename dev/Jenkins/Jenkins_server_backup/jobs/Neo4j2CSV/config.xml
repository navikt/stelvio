<?xml version='1.0' encoding='UTF-8'?>
<project>
  <actions/>
  <description></description>
  <logRotator class="hudson.tasks.LogRotator">
    <daysToKeep>-1</daysToKeep>
    <numToKeep>5</numToKeep>
    <artifactDaysToKeep>-1</artifactDaysToKeep>
    <artifactNumToKeep>-1</artifactNumToKeep>
  </logRotator>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.sonyericsson.rebuild.RebuildSettings plugin="test@example.com">
      <autoRebuild>true</autoRebuild>
    </com.sonyericsson.rebuild.RebuildSettings>
  </properties>
  <scm class="hudson.plugins.git.GitSCM" plugin="test@example.com">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <name>origin</name>
        <url>ssh://test@example.com:7999/eis/wsrr-csv-exports.git</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions>
      <hudson.plugins.git.extensions.impl.CleanBeforeCheckout/>
    </extensions>
  </scm>
  <assignedNode>wsrr-jobs-node</assignedNode>
  <canRoam>false</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <jdk>(Default)</jdk>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <hudson.tasks.Shell>
      <command>/opt/neo4j-community-2.3.1/bin/neo4j-shell -c &quot;import-cypher -d , -o ${WORKSPACE}/exportedcsv/relationships.csv 
match o-[r]-&gt;o2-[r2]-&gt;o3 
return HEAD(LABELS(o)) as SourceType, o.bsrURI as SourceURI, o.name as SourceName,type(r) as Relationship, HEAD(LABELS(o2)) as TargetType, o2.bsrURI as TargetURI, o2.name as TargetName, type(r2) as Relationship2, HEAD(LABELS(o3)) as Target2Type, o3.bsrURI as Target2URI, o3.name as Target2Name&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/opt/neo4j-community-2.3.1/bin/neo4j-shell -c &quot;import-cypher -d , -o ${WORKSPACE}/exportedcsv/properties.csv 
MATCH (n) 
UNWIND keys(n) AS Property 
RETURN HEAD(LABELS(n)) as Type, n.bsrURI as URI, n.name as Name, Property, n[Property] as Value&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/opt/neo4j-community-2.3.1/bin/neo4j-shell -c &quot;import-cypher -d , -o ${WORKSPACE}/exportedcsv/sgw.csv 
MATCH (n:ServiceLevelDefinition) RETURN n.name, 
case &apos;http://nav.no/soagov/taxonomies/security/availabilityZone#SBS&apos; in n.classifiers 
when true then &apos;SBS&apos; 
else 
case &apos;http://nav.no/soagov/taxonomies/security/availabilityZone#FSS&apos; in n.classifiers 
when true then &apos;FSS&apos; 
else &apos;None&apos; 
END 
END 
as Zone, 
case &apos;http://nav.no/soagov/taxonomies/platform/service#SGW2.0&apos; IN n.classifiers 
when true then &apos;SGW2.0&apos; 
else case &apos;http://nav.no/soagov/taxonomies/platform/service#SGW1.0&apos; IN n.classifiers 
when true then &apos;SGW1.0&apos; 
else &apos;None&apos; 
end 
end as SGW&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/opt/neo4j-community-2.3.1/bin/neo4j-shell -c &quot;import-cypher -d , -o ${WORKSPACE}/exportedcsv/organizations.csv 
MATCH (n:Organization) 
RETURN n.name as Name, n.bsrURI as bsrURI
ORDER BY n.name&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/opt/neo4j-community-2.3.1/bin/neo4j-shell -c &quot;import-cypher -d , -o ${WORKSPACE}/exportedcsv/businesscapabilities.csv 
MATCH (bs:BusinessService) 
OPTIONAL MATCH (bs)-[:gep63_capabilityVersions]-&gt;(cv)
OPTIONAL MATCH (bs)-[:ale63_owningOrganization]-&gt;(org)
RETURN bs.bsrURI as bsrURI, HEAD(LABELS(bs)) as Type, bs.name as Name, COLLECT(cv.bsrURI) as Versions, COLLECT(org.bsrURI) as OwningOrganization
ORDER BY bs.name
UNION
MATCH (bs:BusinessApplication) 
OPTIONAL MATCH (bs)-[:gep63_capabilityVersions]-&gt;(cv)
OPTIONAL MATCH (bs)-[:ale63_owningOrganization]-&gt;(org)
RETURN bs.bsrURI as bsrURI, HEAD(LABELS(bs)) as Type, bs.name as Name, COLLECT(cv.bsrURI) as Versions, COLLECT(org.bsrURI) as OwningOrganization
ORDER BY bs.name&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/opt/neo4j-community-2.3.1/bin/neo4j-shell -c &quot;import-cypher -d , -o ${WORKSPACE}/exportedcsv/serviceinterfacespecifications.csv 
MATCH (n:ServiceInterfaceSpecification) 
RETURN n.bsrURI as bsrURI, HEAD(LABELS(n)) as Type, n.name as Name, n.gep63_versionNamespace as gep63_versionNamespace
ORDER BY n.name&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/opt/neo4j-community-2.3.1/bin/neo4j-shell -c &quot;import-cypher -d , -o ${WORKSPACE}/exportedcsv/capabilityverisons.csv 
MATCH (cv:ServiceVersion) 
OPTIONAL MATCH (cv)-[:gep63_interfaceSpecifications]-&gt;(sis:ServiceInterfaceSpecification)
OPTIONAL MATCH (cv)-[:gep63_provides]-&gt;(sld:ServiceLevelDefinition)
OPTIONAL MATCH (cv)-[:gep63_consumes]-&gt;(sla:ServiceLevelAgreement)
RETURN cv.bsrURI as bsrURI, HEAD(LABELS(cv)) as Type, cv.name as Name, cv.version as version, cv.gep63_consumerIdentifier as gep63_consumerIdentifier, cv.classifiers as classifications, COLLECT(sis.bsrURI) as gep63_interfaceSpecifications, COLLECT(sld.bsrURI) as gep63_provides, COLLECT(sla.bsrURI)as gep63_consumes
ORDER BY cv.name
UNION
MATCH (cv:ApplicationVersion) 
OPTIONAL MATCH (cv)-[:gep63_interfaceSpecifications]-&gt;(sis:ServiceInterfaceSpecification)
OPTIONAL MATCH (cv)-[:gep63_provides]-&gt;(sld:ServiceLevelDefinition)
OPTIONAL MATCH (cv)-[:gep63_consumes]-&gt;(sla:ServiceLevelAgreement)
RETURN cv.bsrURI as bsrURI, HEAD(LABELS(cv)) as Type, cv.name as Name, cv.version as version, cv.gep63_consumerIdentifier as gep63_consumerIdentifier, cv.classifiers as classifications, COLLECT(sis.bsrURI) as gep63_interfaceSpecifications, COLLECT(sld.bsrURI) as gep63_provides, COLLECT(sla.bsrURI)as gep63_consumes
ORDER BY cv.name&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/opt/neo4j-community-2.3.1/bin/neo4j-shell -c &quot;import-cypher -d , -o ${WORKSPACE}/exportedcsv/serviceleveldefinitions.csv 
MATCH (sld:ServiceLevelDefinition) 
OPTIONAL MATCH (sld)-[:gep63_anonymousSLA]-&gt;(anon:ServiceLevelAgreement)
RETURN sld.bsrURI as bsrURI, HEAD(LABELS(sld)) as Type, sld.name as name, sld.classifiers as Classifications, sld.version as Version, sld.gep63_developmentVersion as gep63_developmentVersion, sld.gep63_consumerIdentifierLocationInfo as gep63_consumerIdentifierLocationInfo, COLLECT(anon.bsrURI) as gep63_anonymousSLA
ORDER BY sld.name&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/opt/neo4j-community-2.3.1/bin/neo4j-shell -c &quot;import-cypher -d , -o ${WORKSPACE}/exportedcsv/servicelevelagreements.csv 
MATCH (sla:ServiceLevelAgreement)
OPTIONAL MATCH (sla)-[:gep63_agreedEndpoints]-&gt;(sld:ServiceLevelDefinition)
RETURN sla.bsrURI as bsrURI, HEAD(LABELS(sla)) as Type, sla.name as name, COLLECT(sld.bsrURI) as gep63_agreedEndpoints
ORDER BY sla.name&quot;</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>python convertArrays.py</command>
    </hudson.tasks.Shell>
    <hudson.tasks.Shell>
      <command>/opt/rh/git19/root/usr/bin/git status &amp;&amp; /opt/rh/git19/root/usr/bin/git add . &amp;&amp; /opt/rh/git19/root/usr/bin/git commit -m &apos;Latest CSV exports&apos; || echo &apos;Commit failed. Probably nothing to commit.&apos;</command>
    </hudson.tasks.Shell>
  </builders>
  <publishers>
    <hudson.plugins.git.GitPublisher plugin="test@example.com">
      <configVersion>2</configVersion>
      <pushMerge>true</pushMerge>
      <pushOnlyIfSuccess>true</pushOnlyIfSuccess>
      <forcePush>true</forcePush>
      <branchesToPush>
        <hudson.plugins.git.GitPublisher_-BranchToPush>
          <targetRepoName>origin</targetRepoName>
          <branchName>master</branchName>
        </hudson.plugins.git.GitPublisher_-BranchToPush>
      </branchesToPush>
    </hudson.plugins.git.GitPublisher>
  </publishers>
  <buildWrappers/>
</project>
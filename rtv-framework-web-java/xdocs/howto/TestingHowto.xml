<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Testing - Howto</title>
	</properties>
	<body>
		<section name="Testing - Howto">
			
			<subsection name="Oversikt">
				<p>
					Enhetstesting i Struts gjøres enklest med StrutsTestCase som er en utvidelse av JUnit for
					Struts. Den mocker ActionServleten så det er mulig å teste Action, Form, ActionMappingen i
					struts-config samt Tiles mappingen.
				</p>
			</subsection>
			
			<subsection name="Mocktesting">
			
				<h4>Enhetstest</h4>
					<p>
						Testklassen må arve fra MockStrutsTestCase. Det finnes metoder som brukes for å
						sette verdier som trengs når Actionklassen skal kjøres av servleten. Bla. parametere,
						sti, konfigurasjonsfil etc. Se javadoc for mer info.
						<br/>
						Konfigurasjonsfilene (struts-config.xml, tiles-defs.xml, web.xml) kan lages for
						hver enkelt testklasse hvis ønskelig men defineringen av hvor de ligger må se ut som
						under, ikke direkte sti, for å kunne kjøre på både NT og Unix.
						<br/>
						Slik gjøres testen: Først settes verdier så kjøres metoden i Actionklassen og til slutt
						verifiseres	Forwardresultatet og eventuelle feil.
<source><![CDATA[
// Set directory where the configfiles are located
File contDir = new File("./src/test/java/no/trygdeetaten/web/framework/util");
setContextDirectory(contDir);

setRequestPathInfo("/action1.do");
addRequestParameter("executeFindForwardThreePara", "");

// Run the action
actionPerform();

// Verify the result
verifyForwardPath("/action2.do");
verifyNoActionErrors();
]]></source>
						
						Skulle en Tiles være Forward brukes <i>verifyInputTilesForward("side.welcome")</i> for
						å verifisere resultatet.
					</p>

				<h4>Test mot foretningslaget</h4>
					<p>
						Det er BusinessDelegate som styrer forespørselen videre ned til foretningslaget. 
						For at teste en Action som bruker BusinessDelegate må det lages en dummy variant som
					 	brukes isteden. 
					 	<br/>
						Det er Springrammeverket som brukes til å sette BusinessDelegate i presentasjonsarkitekturen
						og den settes i filen presentation-services.xml. Denne filen må kopieres og endres til at
						bruke dummy BusinessDelegate. (Konfigurasjonsfilen må ligge før "orginalet" i classpathen!)
						<br/>
						Servleten må settes til at bruke vår servlet fordi det er den som laster inn BusinessDelegate
						med Spring.
						<br/>
						Utdrag fra en testklasse:
<source><![CDATA[
// Set directory where the configfiles are located
File contDir = new File("./src/test/java/no/trygdeetaten/web/generelt/action");
setContextDirectory(contDir);
setServletConfigFile("/WEB-INF/web.xml");

// Set the servlet to use
FrameworkActionServlet servlet = new FrameworkActionServlet();
setActionServlet(servlet);

setRequestPathInfo("/SokePerson.do");
addRequestParameter("executeSoke", "");

// Set FormBean information
OGS140SokePersonForm form = new OGS140SokePersonForm();
form.setFnummer("12345678901");
setActionForm(form);

// Run the action
actionPerform();

// Verify the result
verifyInputTilesForward("side.OGS140SokePerson");
verifyNoActionErrors();
]]></source>

						DummyBusinessDelegate må arve fra BusinessDelegate og overstyre execute metoden.						
						<br/>
						Eksempel på en DummyBusinessDelegate:
<source><![CDATA[
public class DummyBusinessDelegate extends BusinessDelegate {

	public ServiceResponse execute(ServiceRequest request) {

		ServiceResponse response = new ServiceResponse();

		List list = new ArrayList(); 
		PersonData personData = new PersonData();
		personData.setEtternavn("Etternavn");
		list.add(personData);

		response.setData("personer", list);

		return response;
	}
}
]]></source>
					</p>
			</subsection>

			<subsection name = "Endringslogg">
<source><![CDATA[
$Log$
Revision 1.3  2004/08/04 10:46:02  jla2920
Lagt til test med mocking av BusinessDelegate
]]>			
</source>
			</subsection>
			
		</section>
	</body>
</document>


package no.stelvio.presentation.jsf.validator;

import javax.faces.component.UIComponent;
import javax.faces.context.FacesContext;
import javax.faces.validator.ValidatorException;

import no.stelvio.presentation.binding.context.MessageContextUtil;

/**
 * 
 * FieldRangeValidator validates whether the specified parameter is a valid
 * organization number, and if invalid sets an error message on FacesContext.
 * 
 * @author person37c6059e407e (Capgmeini)
 * @version $Id$
 * 
 */
public class FieldRangeValidator extends AbstractFieldNameValidator {

	/** Minimum message key. */
	public static final String MINIMUM_MESSAGE_ID = "no.stelvio.presentation.validator.FieldRange.MINIMUM";

	/** Maximum message key. */
	public static final String MAXIMUM_MESSAGE_ID = "no.stelvio.presentation.validator.FieldRange.MAXIMUM";

	/** Not in range message key. */
	public static final String NOT_IN_RANGE_MESSAGE_ID = "no.stelvio.presentation.validator.FieldRange.NOT_IN_RANGE_MESSAGE_ID";

	/** Invalid Max and min length message key. */
	public static final String INVALID_MAXM_MIN_LENGTH_MESSAGE_ID = 
		"no.stelvio.presentation.validator.FieldRange.INVALID_MAXM_MIN_LENGTH_MESSAGE_ID";

	private Integer minimum = 0;

	private Integer maximum = 0;

	/**
	 * Validates whether the specified parameter is a string in between a
	 * maximum and minimum int value.
	 * 
	 * {@inheritDoc}
	 */
	@Override
	protected void validateField(FacesContext context, UIComponent component, Object value) throws ValidatorException {
		if (value != null) {
			String values = String.valueOf(value);

			if (minimum >= 0 && maximum > 0) {
				if (maximum - minimum <= 0) {
					Object[] args = { maximum, minimum };
					throw new ValidatorException(MessageContextUtil.getFacesMessage(
							INVALID_MAXM_MIN_LENGTH_MESSAGE_ID, args));
				}

				if (values.length() < minimum || values.length() > maximum) {
					Object[] args = { getFieldName(), minimum, maximum };
					throw new ValidatorException(MessageContextUtil.getFacesMessage(NOT_IN_RANGE_MESSAGE_ID,
							args));
				}
			} else if (minimum < 0) {
				Object[] args = { getFieldName(), minimum };
				throw new ValidatorException(MessageContextUtil.getFacesMessage(MINIMUM_MESSAGE_ID, args));
			} else if (maximum < 1) {
				Object[] args = { getFieldName(), maximum };
				throw new ValidatorException(MessageContextUtil.getFacesMessage(MAXIMUM_MESSAGE_ID, args));
			}
		}
	}

	/**
	 * Get maximum.
	 * 
	 * @return the maximum
	 */
	public Integer getMaximum() {
		return maximum;
	}

	/**
	 * Set maximum.
	 * 
	 * @param maximum
	 *            the maximum to set
	 */
	public void setMaximum(Integer maximum) {
		this.maximum = maximum;
	}

	/**
	 * Get minimum.
	 * 
	 * @return the minimum
	 */
	public Integer getMinimum() {
		return minimum;
	}

	/**
	 * Set minimum.
	 * 
	 * @param minimum
	 *            the minimum to set
	 */
	public void setMinimum(Integer minimum) {
		this.minimum = minimum;
	}

	/**
	 * {@inheritDoc}
	 */
	public Object saveState(FacesContext context) {
		Object[] values = new Object[3];

		values[0] = super.saveState(context);
		values[1] = maximum;
		values[2] = minimum;
		return values;
	}

	/**
	 * {@inheritDoc}
	 */
	public void restoreState(FacesContext context, Object state) {
		Object[] values = (Object[]) state;

		super.restoreState(context, values[0]);
		maximum = (Integer) values[1];
		minimum = (Integer) values[2];
	}

	/**
	 * {@inheritDoc}
	 * 
	 * Autogenerated by Eclipse.
	 * 
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		final int prime = 31;
		int result = 1;
		result = prime * result + ((maximum == null) ? 0 : maximum.hashCode());
		result = prime * result + ((minimum == null) ? 0 : minimum.hashCode());
		return result;
	}

	/**
	 * {@inheritDoc}
	 */
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (!(o instanceof FieldRangeValidator)) {
			return false;
		}

		final FieldRangeValidator fieldRangeValidator = (FieldRangeValidator) o;

		if (maximum != null ? !maximum.equals(fieldRangeValidator.maximum) : fieldRangeValidator.maximum != null) {
			return false;
		}
		if (minimum != null ? !minimum.equals(fieldRangeValidator.minimum) : fieldRangeValidator.minimum != null) {
			return false;
		}

		return true;
	}
}

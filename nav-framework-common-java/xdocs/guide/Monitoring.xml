<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Overvåkning - Guide</title>
	</properties>
	<body>
		<section name="Overvåkning - Guide">
			
			<subsection name="Oversikt">
				<p>
				Overvåkningen er et konfigurerbart rammeverk som kan kobles på i de forskjellige arkitektur lagene.
				Denne konfigurerbarheten gjør at man dynamisk kan øke eller minske mengden overvåking i applikasjonen etter
				behov.
				</p>
				<img src="../images/guide/monitorOverview.gif" />
				<p>
				Figuren over viser hvordan en MonitorChain passer inn i programflyten mellom to tjenester. Eksempelet
				viser en MonitorChain med tre monitor-instanser.
				<ol>
					<li>En service som har blitt satt opp med overvåking blir kallet</li>
					<li>Service'en kaller MonitorChain sin preExecute. MonitorChain kaller preManage på de monitorene som
					også er en Manager. Deretter kaller den preMonitor på alle Monitors.
					</li>
					<li>Neste service blir kallet</li>
					<li>Neste service gjør seg ferdig og returnerer til den første service'en.</li>
					<li>Service'en kaller MonitorChain sin postExecute. MonitorChain kaller postMonitor på samtlige monitors.
					Deretter kalles postManage på alle monitors som også er en manager.</li>
					<li>Den første service'en returnerer.</li>
				</ol>
				</p>
			</subsection>
			<subsection name="Konfigurasjon">
				<p>
				Det skal konfigureres én MonitorChain instans pr. tjeneste som skal overvåkes. Dette er fordi en Monitor implementasjon
				ikke kan garantere at den støtter overvåking på tvers av tjenester. Når man konfigurerer opp en MonitorChain er 
				det viktig at <i>init-method</i> er konfigurert opp til å kalle <i>init()</i>. init() vil initialisere MonitorChain
				og identifisere alle Monitors som også er en Manager.
				</p>				
				<p>Dette eksempelet viser hvordan JMSService er konfigurert opp til å benytte overvåking:</p>
				<source><![CDATA[
<beans>
	<bean id="BrevServerJMSService" class="no.trygdeetaten.integration.framework.jms.JMSService" singleton="true" init-method="init">
		<!-- moitorChain er en property på superklassen, IntegrationService-->
		<property name="monitorChain"><bean ref="BrevServerMonitorChain"/></property>
		...
		Konfigurasjons parametre for JMSService
		...
	</bean>
	<!-- definisjonen av en monitorChain og hvilke monitors denne inneholder -->
	<!-- init-method MÅ benyttes! -->
	<bean id="BrevServerMonitorChain" class="no.nav.common.framework.monitor.MonitorChain" init-method="init">
		<!-- en monitorchain har én setter som tar en array med monitors -->
		<property name="monitors">
			<list>
				<bean id="BrevServerPerformanceMonitor" class="no.nav.common.framework.monitor.PerformanceMonitor">
					<!-- denne monitoren rapporterer til en MBean -->
					<property name="reportDestination"><bean ref="PerfMBean"/></property>
					<property name="reportName"><value>BrevServer</value></property>
				</bean>
				<bean id="BrevServerErrorMonitor" class="no.nav.common.framework.monitor.ErrorMonitor">
					<!-- denne monitoren rapporterer til en MBean -->
					<property name="reportDestination"><bean ref="ErrorMBean"/></property>
					<property name="reportName"><value>BrevServer</value></property>
					<!-- denne slår seg automatisk av hvis 90% av alle kall feiler -->
					<property name="measurementPool"><value>10</value></property>
					<property name="measurementTarget"><value>9</value></property>
					<!-- feilmeldingen som skal brukes dersom den slår seg av -->
					<property name="erroMessage"><value>This service has been disabled.</value></property>
				</bean>
			</list>
		</property>
	</bean>
	<bean id="PerfMBean" class="no.nav.common.framework.monitor.PerformanceMonitorReportRecevier">
		<property name="objectName">Performance<value></value></property>
	</bean>
	<bean id="ErrorMBean" class="no.nav.common.framework.monitor.ErrorMonitorReportReceiver">
		<property name="objectName">Error<value></value></property>
	</bean>
</beans>				
				]]></source>
			</subsection>
			<subsection name="PerformanceMonitor og PerformanceMonitorReportReceiver">
				<p>
				PerformanceMonitor overvåker tiden det tar å eksekvere en tjeneste. Denne tiden til være summen
				av tjenesten selv og alle underliggende tjenester. Performance monitor rapporterer til PerformanceMonitorReportRecevier.
				Performance monitor vil starte en timer i preMonitor og stoppe denne i postMonitor samt rapportere til sin MBean.
				</p>
				<h4>Egenskaper</h4>
				<p>
				<ul>
					<li>reportDestination - Dette må være en ReportReceiver.(Påkrevd)</li>
					<li>reportName - Navnet performance timing'en skal registreres under.(Påkrevd)</li>
				</ul>
				</p>
				<p>
				PerformanceMonitorReportRecevier er en standard MBean som mottar data fra samtlige PerformanceMonitors.
				Alle PerformanceMonitors rapporterer til samme instans av denne. Ved instansiering vil denne bli
				registrert i en MBeanServer.
				<ul>
					<li>objectName - Hvilket javax.jmx.ObjectName som MBean'en skal registreres under. (Påkrevd)</li>
					<li>reporterSize - Hvor mange innslag som skal lagres for hver PerformanceMonitor som rapporterer til denne. Default er 1000. (Valgfri)</li>
				</ul>
				</p>
			</subsection>
			<subsection name="ErrorMonitor og ErrorMonitorReportRecevier">
				<p>
				ErrorMonitor overvåker hvor ofte en tjeneste feiler (og er vellykket). En tjeneste regnes som feilet
				dersom det blir kastet en ServiceFailedException eller en RuntimeException. ErrorMonitor rapporterer til
				ErrorMonitorReportRecevier. ErrorMonitor er også en Manager og kan konfigureres til å kaste en ServiceFailedException
				dersom tjenesten er skrudd av. preManage() vil kaste en ServiceFailedException dersom tjenesten er skrudd av.
				I postManage() vil det sjekkes om tjenesten eksekverte vellykket eller feilet og rapportere dette. Hvis grensen
				er nådd for at tjenesten skal skrus av vil dette også gjøres her.
				</p>
				<h4>Egenskaper</h4>
				<p>
				<ul>
					<li>reportDestination - Dette må være en ReportReceiver. (Påkrevd)</li>
					<li>reportName - Navnet feilrapporteringen skal registreres under. (Påkrevd)</li>
					<li>measurementPool - Hvor mange målinger som skal bli sporet</li>
					<li>measurementTarget - Hvor mange av målingene i measurementPool som må feile for at tjenesten skal slå seg av</li>
					<li>errorMessage - Feilmeldingen som skal benyttes dersom tjenesten er slått av</li>
				</ul>
				Hvis measurementPool er 0, så vil tjenesten aldri skrus av.
				</p>
				<p>
				ErrorMonitorReportRecevier er en standard MBean som mottar data fra samtlige ErrorMonitors. ErrorMonitors
				rapporterer til samme instans av denne. Ved instansiering vil denne bli registrert i en MBeanServer.
				<ul>
					<li>objectName - Hvilket javax.jmx.ObjectName som MBean'en skal registreres under. (Påkrevd)</li>
					<li>reporterSize - Hvor mange innslag som skal lagres for hver ErrorMonitor som rapporterer til denne. Default er 1000. (Valgfri)</li>
				</ul>
				</p>
			</subsection>
			<subsection name = "Endringslogg">
<source><![CDATA[
$Log$
Revision 1.9  2004/06/18 12:38:36  tsb2920
Updated afetr comments from Håvard Bjåstad

Revision 1.8  2004/06/18 08:24:57  tsb2920
Updated after changing the class and interface names for the MBean. This was done due to restrictions in the JMX specifiaction

Revision 1.7  2004/06/18 08:22:42  tsb2920
Updated after changing the class and interface names for the MBean. This was done due to restrictions in the JMX specifiaction

Revision 1.6  2004/06/17 11:15:57  tsb2920
Added comment setting measurementPool to 0 tur turn management feature off

Revision 1.5  2004/06/17 08:57:37  tsb2920
Fixed typing errors

Revision 1.4  2004/06/17 08:10:10  tsb2920
Changed description about error monitor and it's configurable values

Revision 1.3  2004/06/16 14:07:45  psa2920
la til endringslogg
]]>			
</source>
			</subsection>
		</section>
	</body>
</document>


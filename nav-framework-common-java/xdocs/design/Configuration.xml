<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Konfigurasjon - Design</title>
	</properties>
	<body>
		<section name="Konfigurasjon - Design">

			<subsection name="Oversikt">

				<p>
					Pakken <i>no.trygdeetaten.common.framework.config</i>
					består av klasser og interface for systemkonfigurasjon. 
					Implementasjonen av konfigurasjonstjenestene støtter følgende funksjonalitet:
				</p>
				<ul>
					<li> Typesikker konfigurasjon vha Java Beans </li>
					<li> Persistering vha lokale XML-filer</li>
					<li> Fjernadministrasjon vha JMX</li>
					<li> Støtte for Inversion of Control (IoC), også kjent som Dependency Injection</li>
				</ul>
			</subsection>
			
			<subsection name="Beskrivelse">
			
				<h4>Config</h4>
				<p> 
					<i>Config</i> er den sentrale klassen i konfigurasjonsrammeverket, og er implementert 
					som et tynt lag over kjernefunksjonalitet i <i>Spring Framework</i>.
					Config vil være en factory som instantierer seg selv og registrerer instanser som MBeans. Det vil
					kun finnes én Config instans per XML fil og MBean interfacet tilbyr persistering/lasting av 
					konfigurasjon til/fra fil.
				</p>
				
				<h4>BeanFactory</h4>
				<p>
					Interface i <i>Spring Framework</i> for å aksessere Java Beans unikt identifisert ved
					hjelp av en String. Instanser kan aksesseres som uavhengige objekter (prototype design
					pattern) eller som delte objekter (alternativt singleton design pattern). En <i>BeanFactory</i>
					implementerer et sentralt register over komponenter, og sentraliserer konfigurasjonen av
					disse komponentene.
				</p>
				
				<h4>XmlBeanFactory</h4>
				<p>
					Implementasjon av <i>BeanFactory</i> som laster Java Bean definisjoner fra en XML fil lagret
					lokalt på disken. <i>XmlBeanFactory</i> implementerer Inversion-of-Control (IoC) funksjonalitet,
					også kjent som <i>dependency injection</i> design pattern. Dette fremmer løskobling 
					av komponenter og økt testbarhet.
				</p>
				
				<h4>XML konfigurasjonsfil</h4>
				<p>
					Konfigurasjonsfil som benyttes for å persistere Java Bean definisjoner. Eksempel:		
				</p>
<source><![CDATA[
<beans>
   <bean id="HentOppgaveliste" class="no.trygdeetaten.business.oppgaver.service.HentOppgaveListeService" />
   <bean id="HentOppgave" class="no.trygdeetaten.business.oppgaver.service.HentOppgaveService" />
   <bean id="OppdaterOppgave" class="no.trygdeetaten.business.oppgaver.service.OppdaterOppgaveService" />
   <bean id="SlettOppgave" class="no.trygdeetaten.business.oppgaver.service.SlettOppgaveService" />
</beans>		
]]></source>				
				<h4>ConfigMBean</h4>
				<p>
					JMX interface av typen <i>Standard MBean</i> som definerer hvilke attributter og operasjoner
					som skal tilgjengeliggjøres for fjernadministrasjon.
				</p>
				
				<h4>MBeanServer</h4>
				<p>
					<i>MBeanServer</i> er en instans av en JMX server hvor MBeans blir registrert og kalles. 
				</p>
				<h4>Registrering av Config i MBeanServer</h4>
				<p>
					Enhver "unik" instans av Config vil bli registrert vha. JMX i en MBeanServer. Med unik 
					menes hvilken konfig fil som benyttes for Config instansen. M.a.o. dersom to instanser av config
					eksisterer som benytter samme fil er disse å regnes som like.
					Dersom det ikke finnes en MBeanServer tilgjengelig vil det bli laget en. Enhver MBean som registreres
					må registreres i et "domene". Enhver MBeanServer har et "default domain", men alle config objekter vil
					bli registrert i "Config" domenet. I dette domenet vil det kun finnes Config objekter. Config objektet vil 
					også registreres med et navn for å kunne skille det fra andre objekter og dette navnet benyttes for å 
					sjekke om det allerede finnes et Config objekt i MBeanServeren. Navnet vil være likt filnavnet, eks:
					<pre>name=integration-services.xml</pre>
					Sammen med domenet vil dette navnet representere Config MBean'ens <i>ObjectName</i>. Et <i>ObjectName</i>
					ser slik ut:<br/>
					<i>Domain:property1=value1,property2=value2,property3=value3</i><br/>
					Et Config ObjectName vil altså se slik ut:<br/>
					Config:name=<i>filnavn</i>
				</p>
				<p>
					Hensikten med å registrere et Config objekt som en MBean er at denne kan da benyttes til å
					administrere konfigurasjonen uten å måtte rulle ut aplikasjonen på nytt eller starte applikasjonsserveren
					på nytt. Med MBean grensesnittet skal man kunne:
					<ul>
						<li>Laste konfigurasjonsfilen på nytt dersom den har blitt oppdatert.</li>
						<li>Bli fortalt hvilket filnavn som benyttes.</li>
						<li>Hente ut Spring XML'en som ligger til grunn for denne konfigurasjonen.</li>
						<li>Sette en ny Spring XML og lagre denne.</li>
					</ul>
					En MBeanServer kan aksesseres av en frittstående applikasjon som kan administrere de MBeans som finnes der.
				</p>
			</subsection>

			<subsection name="Klassediagram">

				<p>
					Diagrammet viser hvordan <i>Config</i> benytter en Spring Framework <i>BeanFactory</i>, 
					nærmere bestemt <i>XmlBeanFactory</i>, for å laste XML konfigurasjonsfilen. <i>Config</i>
					implementerer <i>ConfigMBean</i> og registreres som en JMX Standard MBean i en JMX 
					<i>MBeanServer</i>.
				</p>

				<img src="../images/design/ConfigurationClass.gif" />

			</subsection>
			
			<subsection name="Sekvensdiagram">

				<p>
					Diagrammet viser hvordan en klient benytter <i>Config</i> for å aksessere en <i>Java Bean</i>,
					og hvordan og i hvilken rekkefølge kall til de andre komponentene prosesseres.
				</p>

				<img src="../images/design/ConfigurationSequence1.gif" />

			</subsection>
			<subsection name = "Endringslogg">
<source><![CDATA[
$Log$
Revision 1.9  2004/06/16 13:53:01  psa2920
la til endringslogg
]]>			
</source>
			</subsection>

		</section>
	</body>
</document>


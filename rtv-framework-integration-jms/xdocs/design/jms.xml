<?xml version="1.0" encoding="iso-8859-1"?>
<document>
	<properties>
		<title>Detaljert Design</title>
	</properties>
	<body>
		<section name="Jms - Detaljert Design">
			<subsection name="Oversikt">
				<p>Mange av systemene som det integreres mot benytter et MQ grensesnitt. Denne modulen benytter JMS med MQ som implementasjon for å benytte disse systemene.</p>
				<p>
					JMS-komponenten implementeres som en service på integrasjonsnivå. Komponenten støtter følgende funksjonalitet:
					<ul>
						<li>Både synkron og asynkron operasjon.</li>
						<li>Temporær og fast definert retur kø.</li>
						<li>Støtte for forskjellige JMS beskjed typer.</li>
					</ul>
				</p>
				<p>Oppførselen til komponenten er bestemt av konfigurasjon, og komponenten kan gjenbrukes for alle tjenester som benytter JMS.</p>
				<p>
					Dersom asynkron operasjon er ønsket har komponenten ikke ansvaret for mottak av retur beskjed. Denne returen vil da bli håndtert av en Message Driven Bean (MDB) som lytter på retur køen. Disse MDB'ene vil ligge over business laget og kalle
					<i>Business Facade</i>
					.
				</p>
				<p>
					For å støtte denne fleksibiliteten må man kunne konfigurere følgende:
					<ul>
						<li>Synkron/asynkron kommunikasjon</li>
						<li>Om ønsket retur kø skal spesifiseres.</li>
						<li>JNDI navn på retur kø. Dette krever at man har spesifisert at retur kø skal benyttes.</li>
						<li>Om temporær retur kø skal benyttes. Dette krever at man har spesifisert at retur kø skal benyttes. Dersom man benytter temporær retur kø vil ikke navn på retur kø benyttes dersom dette er spesifisert. Bruk av temporær retur kø krever også at man benytter synkron kommunikasjon.</li>
						<li>Timeout på svar ved bruk av synkron kommunikasjon.</li>
						<li>JNDI navn til QueueConnectionFactory.</li>
						<li>JNDI navn til Queue som benyttes for sending.</li>
						<li>Hvordan en retur beskjed skal håndteres</li>
						<li>Bruk av "message selectors" for å kunne sile ut "uønskede" meldinger.</li>
					</ul>
				</p>
				<p>
					Dersom retur beskjeden fra et system ikke kan benyttes som den er ved å bruke grensesnittet til retur beskjed typen, så vil beskjeden hånderes av en
					<i>MessageHandler</i>. En <i>MessageHandler</i>	kan være spesifikk for et gitt system, eller den kan være generell, for f.eks. text meldinger hvor feltene har en fast bredde.
					Den samme funksjonaliteten vil også være nødvendig når en beskjed sendes. Hvis en beskjed ikke kan sendes som den er må den formateres slik at den kan bli forstått av systemet.
					Til dette vil det benyttes en <i>MessageFormatter</i>.
				</p>
				<h4>Asynkron kommunikasjon</h4>
				<p>
					Ved asynkron kommunikasjon vil ikke <i>JMSService</i> være mottakeren av returen. Returen vil da bli håndtert av en MDB. MDB'en vil være spesifikk
					for hvert system, siden den må vite hvilke services som skal kalles når den mottar en beskjed. Disse MDB'ene vil også benytte seg av <i>MessageHandler</i>
					for å håndtere returen fra systemet.
				</p>
				<h4>Synkron kommunikasjon</h4>
				<p>
					Ved synkron kommunikasjon vil <i>JMSService</i> vente på et svar før den returnerer. Dette vil gjøres ved at <i>JMSService</i> lytter på køen til 
					beskjeden den er ute etter kommer tilbake. Dersom systemet benytter en fast definert retur kø kan man benytte
					"Message Selectors" for å plukke ut returbeskjedene fra køen. Dette stiller følgende krav:
					<ul>
						<li>Systemet returnerer en form for klient id i retur headeren som klienten må vite om før beskjeden sendes.</li>
						<li>Ingen andre applikasjoner plukker beskjeden fra køen før den kommer frem til sin rettmessige eier.</li>
					</ul>
				</p>
				<h4>MessageFormatter</h4>
				<p>
					En MessageFormatter implementasjon vil ha ansvaret for å formattere en JMS-beskjed til et spesielt system eller format. En MessageFormatter
					har ansvaret for å lage en javax.jms.Message av riktig type (TextMessage, ObjectMessage, etc.).
				</p>
				<p>
					<b>XMLMessageFormatter</b><br/>
					Siden de fleste systemene som benytter JMS/MQ til kommunikasjon benytter et XML-format er det hensiktsmessig å ha en formatter som kan produsere
					meldinger med XML innhold.<br/>
					<!--
					<b>FixedFieldFormatter</b><br/>
					Denne formatteren kan benyttes mot systemer som benytter seg av faste felter for beskjed formatet. Denne vil gjenbruke 
					Hibernate funksjonaliteten som er benyttet i JCA CICS komponenten.
					-->
				</p>
				
				<h4>MessageHandler</h4>
				<p>
					En MessageHandler implementasjon har ansvaret for å håndtere retur-beskjeder dersom synkron operasjon er konfigurert. En MessageHandler forventes
					å vite javax.jms.Message typen den skal håndtere (TextMessage, ObjectMessage, etc.)
				</p>
				<p>
					<b>XMLMessageHandler</b><br/>
					Siden de fleste systemene som benytter JMS/MQ til kommunikasjon benytter et XML-format er det hensiktsmessig å ha en handler som kan håndtere XML-innhold i
					beskjeder.<br/>
					<!--
					<b>FixedFieldHandler</b><br/>
					Denne handleren kan benyttes mot systemer som benytter seg av faste felter for beskjed formatet. Denne vil gjenbruke 
					Hibernate funksjonaliteten som er benyttet i JCA CICS komponenten.
					-->
				</p>

			</subsection>
			<subsection name="Klassediagram">
				<img src="../images/design/classDiagramJMS.gif" />
			</subsection>
			<subsection name = "Endringslogg">
<source><![CDATA[
$Log$
Revision 1.12  2004/06/17 10:17:51  tsb2920
Updated after review by Håvard Bjåstad

Revision 1.11  2004/06/16 14:36:32  tsb2920
Added CVS control of change log
]]>			
</source>
			</subsection>

		</section>
	</body>
</document>

